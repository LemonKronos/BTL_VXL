
MCU_BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f2c  08005f2c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f2c  08005f2c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f2c  08005f2c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f2c  08005f2c  00015f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000008c  08005fc0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005fc0  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017190  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312a  00000000  00000000  00037245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0003a370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  0003b200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fde  00000000  00000000  0003bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001433b  00000000  00000000  00055f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c23e  00000000  00000000  0006a259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e84  00000000  00000000  000f64ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005db8 	.word	0x08005db8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08005db8 	.word	0x08005db8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b086      	sub	sp, #24
 8000164:	af02      	add	r7, sp, #8
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	f023 030f 	bic.w	r3, r3, #15
 8000170:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	011b      	lsls	r3, r3, #4
 8000176:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000178:	7bfb      	ldrb	r3, [r7, #15]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000182:	7bfb      	ldrb	r3, [r7, #15]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800018c:	7bbb      	ldrb	r3, [r7, #14]
 800018e:	f043 030c 	orr.w	r3, r3, #12
 8000192:	b2db      	uxtb	r3, r3
 8000194:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000196:	7bbb      	ldrb	r3, [r7, #14]
 8000198:	f043 0308 	orr.w	r3, r3, #8
 800019c:	b2db      	uxtb	r3, r3
 800019e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001a0:	f107 0208 	add.w	r2, r7, #8
 80001a4:	2364      	movs	r3, #100	; 0x64
 80001a6:	9300      	str	r3, [sp, #0]
 80001a8:	2304      	movs	r3, #4
 80001aa:	2142      	movs	r1, #66	; 0x42
 80001ac:	4803      	ldr	r0, [pc, #12]	; (80001bc <lcd_send_cmd+0x5c>)
 80001ae:	f002 fa27 	bl	8002600 <HAL_I2C_Master_Transmit>
}
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	200001ac 	.word	0x200001ac

080001c0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f023 030f 	bic.w	r3, r3, #15
 80001d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	f043 030d 	orr.w	r3, r3, #13
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001f6:	7bbb      	ldrb	r3, [r7, #14]
 80001f8:	f043 0309 	orr.w	r3, r3, #9
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2304      	movs	r3, #4
 800020a:	2142      	movs	r1, #66	; 0x42
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <lcd_send_data+0x5c>)
 800020e:	f002 f9f7 	bl	8002600 <HAL_I2C_Master_Transmit>
}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	200001ac 	.word	0x200001ac

08000220 <lcd_init>:

void lcd_init (void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000224:	2033      	movs	r0, #51	; 0x33
 8000226:	f7ff ff9b 	bl	8000160 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800022a:	2032      	movs	r0, #50	; 0x32
 800022c:	f7ff ff98 	bl	8000160 <lcd_send_cmd>
	HAL_Delay(50);
 8000230:	2032      	movs	r0, #50	; 0x32
 8000232:	f001 fd09 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000236:	2028      	movs	r0, #40	; 0x28
 8000238:	f7ff ff92 	bl	8000160 <lcd_send_cmd>
	HAL_Delay(50);
 800023c:	2032      	movs	r0, #50	; 0x32
 800023e:	f001 fd03 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000242:	2001      	movs	r0, #1
 8000244:	f7ff ff8c 	bl	8000160 <lcd_send_cmd>
	HAL_Delay(50);
 8000248:	2032      	movs	r0, #50	; 0x32
 800024a:	f001 fcfd 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800024e:	2006      	movs	r0, #6
 8000250:	f7ff ff86 	bl	8000160 <lcd_send_cmd>
	HAL_Delay(50);
 8000254:	2032      	movs	r0, #50	; 0x32
 8000256:	f001 fcf7 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800025a:	200c      	movs	r0, #12
 800025c:	f7ff ff80 	bl	8000160 <lcd_send_cmd>
	HAL_Delay(50);
 8000260:	2032      	movs	r0, #50	; 0x32
 8000262:	f001 fcf1 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000266:	2002      	movs	r0, #2
 8000268:	f7ff ff7a 	bl	8000160 <lcd_send_cmd>
	HAL_Delay(50);
 800026c:	2032      	movs	r0, #50	; 0x32
 800026e:	f001 fceb 	bl	8001c48 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000272:	2080      	movs	r0, #128	; 0x80
 8000274:	f7ff ff74 	bl	8000160 <lcd_send_cmd>
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}

0800027c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000284:	e006      	b.n	8000294 <lcd_send_string+0x18>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ff96 	bl	80001c0 <lcd_send_data>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d1f4      	bne.n	8000286 <lcd_send_string+0xa>
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <lcd_clear_display>:

void lcd_clear_display (void)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80002aa:	2001      	movs	r0, #1
 80002ac:	f7ff ff58 	bl	8000160 <lcd_send_cmd>
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <lcd_goto_XY>:

void lcd_goto_XY(int row, int col)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
    uint8_t pos_Addr;
    if(row == 0)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d104      	bne.n	80002ce <lcd_goto_XY+0x1a>
    {
        pos_Addr = 0x80 + col; // Hàng 0 bắt đầu từ 0x80
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	3b80      	subs	r3, #128	; 0x80
 80002ca:	73fb      	strb	r3, [r7, #15]
 80002cc:	e006      	b.n	80002dc <lcd_goto_XY+0x28>
    }
    else if(row == 1)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d103      	bne.n	80002dc <lcd_goto_XY+0x28>
    {
        pos_Addr = 0xC0 + col; // Hàng 1 bắt đầu từ 0xC0
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	3b40      	subs	r3, #64	; 0x40
 80002da:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(pos_Addr);
 80002dc:	7bfb      	ldrb	r3, [r7, #15]
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff3e 	bl	8000160 <lcd_send_cmd>
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <LedBlinky>:
#include "LCD_I2C.h"
#include "traffic_light.h"

extern traffic_way main_traffic, side_traffic;

void LedBlinky(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80002f0:	2120      	movs	r1, #32
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <LedBlinky+0x10>)
 80002f4:	f002 f813 	bl	800231e <HAL_GPIO_TogglePin>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010800 	.word	0x40010800

08000300 <timeCountDown>:
void LedBlinky1(){
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}
void timeCountDown(){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	if(main_traffic.count_down > 0) main_traffic.count_down--;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <timeCountDown+0x38>)
 8000306:	785b      	ldrb	r3, [r3, #1]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d005      	beq.n	8000318 <timeCountDown+0x18>
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <timeCountDown+0x38>)
 800030e:	785b      	ldrb	r3, [r3, #1]
 8000310:	3b01      	subs	r3, #1
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <timeCountDown+0x38>)
 8000316:	705a      	strb	r2, [r3, #1]
	if(side_traffic.count_down > 0) side_traffic.count_down--;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <timeCountDown+0x3c>)
 800031a:	785b      	ldrb	r3, [r3, #1]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d005      	beq.n	800032c <timeCountDown+0x2c>
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <timeCountDown+0x3c>)
 8000322:	785b      	ldrb	r3, [r3, #1]
 8000324:	3b01      	subs	r3, #1
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <timeCountDown+0x3c>)
 800032a:	705a      	strb	r2, [r3, #1]
	updateLCD(traffic);
 800032c:	2000      	movs	r0, #0
 800032e:	f000 fe27 	bl	8000f80 <updateLCD>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004
 800033c:	2000000c 	.word	0x2000000c

08000340 <timeCountUpFast>:
void timeCountUpFast(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	if(mainCountDown < MAX_COUNT_DOWN) mainCountDown++;
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <timeCountUpFast+0x2c>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b62      	cmp	r3, #98	; 0x62
 800034a:	d806      	bhi.n	800035a <timeCountUpFast+0x1a>
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <timeCountUpFast+0x2c>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <timeCountUpFast+0x2c>)
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e002      	b.n	8000360 <timeCountUpFast+0x20>
	else mainCountDown = 0;
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <timeCountUpFast+0x2c>)
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
	updateLCD(counter);
 8000360:	2001      	movs	r0, #1
 8000362:	f000 fe0d 	bl	8000f80 <updateLCD>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	200000eb 	.word	0x200000eb

08000370 <timeCountDownFast>:
void timeCountDownFast(){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	if(mainCountDown > 0) mainCountDown--;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <timeCountDownFast+0x2c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d006      	beq.n	800038a <timeCountDownFast+0x1a>
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <timeCountDownFast+0x2c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	3b01      	subs	r3, #1
 8000382:	b2da      	uxtb	r2, r3
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <timeCountDownFast+0x2c>)
 8000386:	701a      	strb	r2, [r3, #0]
 8000388:	e002      	b.n	8000390 <timeCountDownFast+0x20>
	else mainCountDown = MAX_COUNT_DOWN;
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <timeCountDownFast+0x2c>)
 800038c:	2263      	movs	r2, #99	; 0x63
 800038e:	701a      	strb	r2, [r3, #0]
	updateLCD(counter);
 8000390:	2001      	movs	r0, #1
 8000392:	f000 fdf5 	bl	8000f80 <updateLCD>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200000eb 	.word	0x200000eb

080003a0 <displayLCD>:
void displayLCD(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
	char buffer[17];
	char color[2] = " ";
 80003a6:	2320      	movs	r3, #32
 80003a8:	813b      	strh	r3, [r7, #8]

	if(t_mode_main == RED) color[0] = 'R';
 80003aa:	4b74      	ldr	r3, [pc, #464]	; (800057c <displayLCD+0x1dc>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d102      	bne.n	80003b8 <displayLCD+0x18>
 80003b2:	2352      	movs	r3, #82	; 0x52
 80003b4:	723b      	strb	r3, [r7, #8]
 80003b6:	e00c      	b.n	80003d2 <displayLCD+0x32>
	else if(t_mode_main == YELLOW) color[0] = 'Y';
 80003b8:	4b70      	ldr	r3, [pc, #448]	; (800057c <displayLCD+0x1dc>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d102      	bne.n	80003c6 <displayLCD+0x26>
 80003c0:	2359      	movs	r3, #89	; 0x59
 80003c2:	723b      	strb	r3, [r7, #8]
 80003c4:	e005      	b.n	80003d2 <displayLCD+0x32>
	else if(t_mode_main == GREEN) color[0] = 'G';
 80003c6:	4b6d      	ldr	r3, [pc, #436]	; (800057c <displayLCD+0x1dc>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d101      	bne.n	80003d2 <displayLCD+0x32>
 80003ce:	2347      	movs	r3, #71	; 0x47
 80003d0:	723b      	strb	r3, [r7, #8]
	if(mainCountDown >= 100) sprintf(buffer, "WTF main?");
 80003d2:	4b6b      	ldr	r3, [pc, #428]	; (8000580 <displayLCD+0x1e0>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b63      	cmp	r3, #99	; 0x63
 80003d8:	d906      	bls.n	80003e8 <displayLCD+0x48>
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	4969      	ldr	r1, [pc, #420]	; (8000584 <displayLCD+0x1e4>)
 80003e0:	4618      	mov	r0, r3
 80003e2:	f005 f8af 	bl	8005544 <siprintf>
 80003e6:	e018      	b.n	800041a <displayLCD+0x7a>
	else if(mainCountDown >= 10) sprintf(buffer, "MAIN:%ds%s|MODE: ", mainCountDown, color);
 80003e8:	4b65      	ldr	r3, [pc, #404]	; (8000580 <displayLCD+0x1e0>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b09      	cmp	r3, #9
 80003ee:	d90a      	bls.n	8000406 <displayLCD+0x66>
 80003f0:	4b63      	ldr	r3, [pc, #396]	; (8000580 <displayLCD+0x1e0>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	f107 0308 	add.w	r3, r7, #8
 80003fa:	f107 000c 	add.w	r0, r7, #12
 80003fe:	4962      	ldr	r1, [pc, #392]	; (8000588 <displayLCD+0x1e8>)
 8000400:	f005 f8a0 	bl	8005544 <siprintf>
 8000404:	e009      	b.n	800041a <displayLCD+0x7a>
	else sprintf(buffer, "MAIN: %ds%s|MODE: ", mainCountDown, color);
 8000406:	4b5e      	ldr	r3, [pc, #376]	; (8000580 <displayLCD+0x1e0>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	461a      	mov	r2, r3
 800040c:	f107 0308 	add.w	r3, r7, #8
 8000410:	f107 000c 	add.w	r0, r7, #12
 8000414:	495d      	ldr	r1, [pc, #372]	; (800058c <displayLCD+0x1ec>)
 8000416:	f005 f895 	bl	8005544 <siprintf>
	lcd_goto_XY(0, 0);
 800041a:	2100      	movs	r1, #0
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff ff49 	bl	80002b4 <lcd_goto_XY>
	lcd_send_string(buffer);
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff28 	bl	800027c <lcd_send_string>

	if(strcmp(currentMode, "CONFIG") == 0){// CONFIG MODE
 800042c:	4958      	ldr	r1, [pc, #352]	; (8000590 <displayLCD+0x1f0>)
 800042e:	4859      	ldr	r0, [pc, #356]	; (8000594 <displayLCD+0x1f4>)
 8000430:	f7ff fe8c 	bl	800014c <strcmp>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d141      	bne.n	80004be <displayLCD+0x11e>
		char token[4] = "   ";
 800043a:	4b57      	ldr	r3, [pc, #348]	; (8000598 <displayLCD+0x1f8>)
 800043c:	607b      	str	r3, [r7, #4]
		if(flag_updateCountDown == 1){
 800043e:	4b57      	ldr	r3, [pc, #348]	; (800059c <displayLCD+0x1fc>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d107      	bne.n	8000456 <displayLCD+0xb6>
			flag_updateCountDown = 0;
 8000446:	4b55      	ldr	r3, [pc, #340]	; (800059c <displayLCD+0x1fc>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
			sprintf(token, "SET");
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4954      	ldr	r1, [pc, #336]	; (80005a0 <displayLCD+0x200>)
 8000450:	4618      	mov	r0, r3
 8000452:	f005 f877 	bl	8005544 <siprintf>
		}
		if(sideCountDown == 2){
 8000456:	4b53      	ldr	r3, [pc, #332]	; (80005a4 <displayLCD+0x204>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d107      	bne.n	800046e <displayLCD+0xce>
			sprintf(buffer, "RED   %s|", token);
 800045e:	1d3a      	adds	r2, r7, #4
 8000460:	f107 030c 	add.w	r3, r7, #12
 8000464:	4950      	ldr	r1, [pc, #320]	; (80005a8 <displayLCD+0x208>)
 8000466:	4618      	mov	r0, r3
 8000468:	f005 f86c 	bl	8005544 <siprintf>
 800046c:	e01d      	b.n	80004aa <displayLCD+0x10a>
		}
		else if(sideCountDown == 3){
 800046e:	4b4d      	ldr	r3, [pc, #308]	; (80005a4 <displayLCD+0x204>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b03      	cmp	r3, #3
 8000474:	d107      	bne.n	8000486 <displayLCD+0xe6>
			sprintf(buffer, "YELLOW%s|", token);
 8000476:	1d3a      	adds	r2, r7, #4
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	494b      	ldr	r1, [pc, #300]	; (80005ac <displayLCD+0x20c>)
 800047e:	4618      	mov	r0, r3
 8000480:	f005 f860 	bl	8005544 <siprintf>
 8000484:	e011      	b.n	80004aa <displayLCD+0x10a>
		}
		else if(sideCountDown == 4){
 8000486:	4b47      	ldr	r3, [pc, #284]	; (80005a4 <displayLCD+0x204>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b04      	cmp	r3, #4
 800048c:	d107      	bne.n	800049e <displayLCD+0xfe>
			sprintf(buffer, "GREEN %s|", token);
 800048e:	1d3a      	adds	r2, r7, #4
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	4946      	ldr	r1, [pc, #280]	; (80005b0 <displayLCD+0x210>)
 8000496:	4618      	mov	r0, r3
 8000498:	f005 f854 	bl	8005544 <siprintf>
 800049c:	e005      	b.n	80004aa <displayLCD+0x10a>
		}
		else{
			sprintf(buffer, "WTFCOLOR |");
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4944      	ldr	r1, [pc, #272]	; (80005b4 <displayLCD+0x214>)
 80004a4:	4618      	mov	r0, r3
 80004a6:	f005 f84d 	bl	8005544 <siprintf>
		}
		lcd_goto_XY(1, 0);
 80004aa:	2100      	movs	r1, #0
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff ff01 	bl	80002b4 <lcd_goto_XY>
		lcd_send_string(buffer);
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fee0 	bl	800027c <lcd_send_string>
 80004bc:	e040      	b.n	8000540 <displayLCD+0x1a0>
	}
	else{// RUN NORMALLY
		if(t_mode_side == RED) color[0] = 'R';
 80004be:	4b3e      	ldr	r3, [pc, #248]	; (80005b8 <displayLCD+0x218>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d102      	bne.n	80004cc <displayLCD+0x12c>
 80004c6:	2352      	movs	r3, #82	; 0x52
 80004c8:	723b      	strb	r3, [r7, #8]
 80004ca:	e00c      	b.n	80004e6 <displayLCD+0x146>
		else if(t_mode_side == YELLOW) color[0] = 'Y';
 80004cc:	4b3a      	ldr	r3, [pc, #232]	; (80005b8 <displayLCD+0x218>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d102      	bne.n	80004da <displayLCD+0x13a>
 80004d4:	2359      	movs	r3, #89	; 0x59
 80004d6:	723b      	strb	r3, [r7, #8]
 80004d8:	e005      	b.n	80004e6 <displayLCD+0x146>
		else if(t_mode_side == GREEN) color[0] = 'G';
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <displayLCD+0x218>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d101      	bne.n	80004e6 <displayLCD+0x146>
 80004e2:	2347      	movs	r3, #71	; 0x47
 80004e4:	723b      	strb	r3, [r7, #8]
		if(sideCountDown >= 100) sprintf(buffer, "WTF side?");
 80004e6:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <displayLCD+0x204>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b63      	cmp	r3, #99	; 0x63
 80004ec:	d906      	bls.n	80004fc <displayLCD+0x15c>
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	4932      	ldr	r1, [pc, #200]	; (80005bc <displayLCD+0x21c>)
 80004f4:	4618      	mov	r0, r3
 80004f6:	f005 f825 	bl	8005544 <siprintf>
 80004fa:	e018      	b.n	800052e <displayLCD+0x18e>
		else if(sideCountDown >= 10) sprintf(buffer, "SIDE:%ds%s|", sideCountDown, color);
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <displayLCD+0x204>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b09      	cmp	r3, #9
 8000502:	d90a      	bls.n	800051a <displayLCD+0x17a>
 8000504:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <displayLCD+0x204>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	f107 000c 	add.w	r0, r7, #12
 8000512:	492b      	ldr	r1, [pc, #172]	; (80005c0 <displayLCD+0x220>)
 8000514:	f005 f816 	bl	8005544 <siprintf>
 8000518:	e009      	b.n	800052e <displayLCD+0x18e>
		else sprintf(buffer, "SIDE: %ds%s|", sideCountDown, color);
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <displayLCD+0x204>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	f107 000c 	add.w	r0, r7, #12
 8000528:	4926      	ldr	r1, [pc, #152]	; (80005c4 <displayLCD+0x224>)
 800052a:	f005 f80b 	bl	8005544 <siprintf>
		lcd_goto_XY(1, 0);
 800052e:	2100      	movs	r1, #0
 8000530:	2001      	movs	r0, #1
 8000532:	f7ff febf 	bl	80002b4 <lcd_goto_XY>
		lcd_send_string(buffer);
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fe9e 	bl	800027c <lcd_send_string>
	}

	if(currentMode[6] != '\0') sprintf(buffer, "BUGGED");
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <displayLCD+0x1f4>)
 8000542:	799b      	ldrb	r3, [r3, #6]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d006      	beq.n	8000556 <displayLCD+0x1b6>
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	491e      	ldr	r1, [pc, #120]	; (80005c8 <displayLCD+0x228>)
 800054e:	4618      	mov	r0, r3
 8000550:	f004 fff8 	bl	8005544 <siprintf>
 8000554:	e005      	b.n	8000562 <displayLCD+0x1c2>
	else sprintf(buffer, currentMode);
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	490e      	ldr	r1, [pc, #56]	; (8000594 <displayLCD+0x1f4>)
 800055c:	4618      	mov	r0, r3
 800055e:	f004 fff1 	bl	8005544 <siprintf>
	lcd_goto_XY(1, 10);
 8000562:	210a      	movs	r1, #10
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff fea5 	bl	80002b4 <lcd_goto_XY>
	lcd_send_string(buffer);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe84 	bl	800027c <lcd_send_string>
}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200000d0 	.word	0x200000d0
 8000580:	200000eb 	.word	0x200000eb
 8000584:	08005dd0 	.word	0x08005dd0
 8000588:	08005ddc 	.word	0x08005ddc
 800058c:	08005df0 	.word	0x08005df0
 8000590:	08005e04 	.word	0x08005e04
 8000594:	200000ec 	.word	0x200000ec
 8000598:	00202020 	.word	0x00202020
 800059c:	200000df 	.word	0x200000df
 80005a0:	08005e0c 	.word	0x08005e0c
 80005a4:	200000e0 	.word	0x200000e0
 80005a8:	08005e10 	.word	0x08005e10
 80005ac:	08005e1c 	.word	0x08005e1c
 80005b0:	08005e28 	.word	0x08005e28
 80005b4:	08005e34 	.word	0x08005e34
 80005b8:	2000001c 	.word	0x2000001c
 80005bc:	08005e40 	.word	0x08005e40
 80005c0:	08005e4c 	.word	0x08005e4c
 80005c4:	08005e58 	.word	0x08005e58
 80005c8:	08005e68 	.word	0x08005e68

080005cc <toggleLedColor>:
void toggleLedColor(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	ledColor* color = (ledColor*)TaskPara.para1;
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <toggleLedColor+0xc4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	607b      	str	r3, [r7, #4]
	switch(*color){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d039      	beq.n	8000654 <toggleLedColor+0x88>
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	dc50      	bgt.n	8000686 <toggleLedColor+0xba>
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <toggleLedColor+0x22>
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d019      	beq.n	8000620 <toggleLedColor+0x54>
			LedTraffic(main_way, LED_GREEN);
			LedTraffic(side_way, LED_GREEN);
		}
		break;
	}
}
 80005ec:	e04b      	b.n	8000686 <toggleLedColor+0xba>
		if(HAL_GPIO_ReadPin(LedMain0_Port, LedMain0_Pin) == GPIO_PIN_SET){
 80005ee:	2110      	movs	r1, #16
 80005f0:	4828      	ldr	r0, [pc, #160]	; (8000694 <toggleLedColor+0xc8>)
 80005f2:	f001 fe65 	bl	80022c0 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d108      	bne.n	800060e <toggleLedColor+0x42>
			LedTraffic(main_way, LED_OFF);
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fcdc 	bl	8000fbc <LedTraffic>
			LedTraffic(side_way, LED_OFF);
 8000604:	2100      	movs	r1, #0
 8000606:	2001      	movs	r0, #1
 8000608:	f000 fcd8 	bl	8000fbc <LedTraffic>
		break;
 800060c:	e03b      	b.n	8000686 <toggleLedColor+0xba>
			LedTraffic(main_way, LED_RED);
 800060e:	2101      	movs	r1, #1
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fcd3 	bl	8000fbc <LedTraffic>
			LedTraffic(side_way, LED_RED);
 8000616:	2101      	movs	r1, #1
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fccf 	bl	8000fbc <LedTraffic>
		break;
 800061e:	e032      	b.n	8000686 <toggleLedColor+0xba>
		if(HAL_GPIO_ReadPin(LedMain1_Port, LedMain1_Pin) == GPIO_PIN_SET){
 8000620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000624:	481b      	ldr	r0, [pc, #108]	; (8000694 <toggleLedColor+0xc8>)
 8000626:	f001 fe4b 	bl	80022c0 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	d108      	bne.n	8000642 <toggleLedColor+0x76>
			LedTraffic(main_way, LED_OFF);
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f000 fcc2 	bl	8000fbc <LedTraffic>
			LedTraffic(side_way, LED_OFF);
 8000638:	2100      	movs	r1, #0
 800063a:	2001      	movs	r0, #1
 800063c:	f000 fcbe 	bl	8000fbc <LedTraffic>
		break;
 8000640:	e021      	b.n	8000686 <toggleLedColor+0xba>
			LedTraffic(main_way, LED_YELLOW);
 8000642:	2102      	movs	r1, #2
 8000644:	2000      	movs	r0, #0
 8000646:	f000 fcb9 	bl	8000fbc <LedTraffic>
			LedTraffic(side_way, LED_YELLOW);
 800064a:	2102      	movs	r1, #2
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fcb5 	bl	8000fbc <LedTraffic>
		break;
 8000652:	e018      	b.n	8000686 <toggleLedColor+0xba>
		if(HAL_GPIO_ReadPin(LedMain0_Port, LedMain0_Pin) == GPIO_PIN_SET){
 8000654:	2110      	movs	r1, #16
 8000656:	480f      	ldr	r0, [pc, #60]	; (8000694 <toggleLedColor+0xc8>)
 8000658:	f001 fe32 	bl	80022c0 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d108      	bne.n	8000674 <toggleLedColor+0xa8>
			LedTraffic(main_way, LED_OFF);
 8000662:	2100      	movs	r1, #0
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fca9 	bl	8000fbc <LedTraffic>
			LedTraffic(side_way, LED_OFF);
 800066a:	2100      	movs	r1, #0
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fca5 	bl	8000fbc <LedTraffic>
		break;
 8000672:	e007      	b.n	8000684 <toggleLedColor+0xb8>
			LedTraffic(main_way, LED_GREEN);
 8000674:	2103      	movs	r1, #3
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fca0 	bl	8000fbc <LedTraffic>
			LedTraffic(side_way, LED_GREEN);
 800067c:	2103      	movs	r1, #3
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fc9c 	bl	8000fbc <LedTraffic>
		break;
 8000684:	bf00      	nop
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000fc 	.word	0x200000fc
 8000694:	40010c00 	.word	0x40010c00

08000698 <SCH_Init>:
#endif
#endif

#ifdef SCH_On

void SCH_Init(){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	memset(SCH_Task_List, 0, sizeof(SCH_Task_List));
 800069c:	22a0      	movs	r2, #160	; 0xa0
 800069e:	2100      	movs	r1, #0
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <SCH_Init+0x24>)
 80006a2:	f004 ff47 	bl	8005534 <memset>
	ERROR_CODE = 0;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <SCH_Init+0x28>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <SCH_Init+0x2c>)
 80006ae:	f004 fb75 	bl	8004d9c <HAL_TIM_Base_Start_IT>
	HAL_IWDG_Init(&hiwdg);
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <SCH_Init+0x30>)
 80006b4:	f003 fed4 	bl	8004460 <HAL_IWDG_Init>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000108 	.word	0x20000108
 80006c0:	200001a8 	.word	0x200001a8
 80006c4:	2000020c 	.word	0x2000020c
 80006c8:	20000200 	.word	0x20000200

080006cc <SCH_Update>:

void SCH_Update() {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
    for (uint8_t Index = 0; Index < SCH_MAX_TASK; Index++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	71fb      	strb	r3, [r7, #7]
 80006d6:	e041      	b.n	800075c <SCH_Update+0x90>
        if (SCH_Task_List[Index].pTask) {
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SCH_Update+0xa4>)
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d037      	beq.n	8000756 <SCH_Update+0x8a>
            if (SCH_Task_List[Index].Delay == 0) {
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SCH_Update+0xa4>)
 80006ea:	011b      	lsls	r3, r3, #4
 80006ec:	4413      	add	r3, r2
 80006ee:	3304      	adds	r3, #4
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d123      	bne.n	800073e <SCH_Update+0x72>
                SCH_Task_List[Index].RunMe += 1;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <SCH_Update+0xa4>)
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	4413      	add	r3, r2
 80006fe:	330c      	adds	r3, #12
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	3201      	adds	r2, #1
 8000706:	b2d1      	uxtb	r1, r2
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <SCH_Update+0xa4>)
 800070a:	011b      	lsls	r3, r3, #4
 800070c:	4413      	add	r3, r2
 800070e:	330c      	adds	r3, #12
 8000710:	460a      	mov	r2, r1
 8000712:	701a      	strb	r2, [r3, #0]
                if (SCH_Task_List[Index].Period) {
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <SCH_Update+0xa4>)
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	4413      	add	r3, r2
 800071c:	3308      	adds	r3, #8
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d018      	beq.n	8000756 <SCH_Update+0x8a>
                    SCH_Task_List[Index].Delay = SCH_Task_List[Index].Period;
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4911      	ldr	r1, [pc, #68]	; (8000770 <SCH_Update+0xa4>)
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	440a      	add	r2, r1
 800072e:	3208      	adds	r2, #8
 8000730:	6812      	ldr	r2, [r2, #0]
 8000732:	490f      	ldr	r1, [pc, #60]	; (8000770 <SCH_Update+0xa4>)
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	440b      	add	r3, r1
 8000738:	3304      	adds	r3, #4
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	e00b      	b.n	8000756 <SCH_Update+0x8a>
                }
            } else {
                SCH_Task_List[Index].Delay--;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	490b      	ldr	r1, [pc, #44]	; (8000770 <SCH_Update+0xa4>)
 8000742:	011a      	lsls	r2, r3, #4
 8000744:	440a      	add	r2, r1
 8000746:	3204      	adds	r2, #4
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	3a01      	subs	r2, #1
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <SCH_Update+0xa4>)
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	440b      	add	r3, r1
 8000752:	3304      	adds	r3, #4
 8000754:	601a      	str	r2, [r3, #0]
    for (uint8_t Index = 0; Index < SCH_MAX_TASK; Index++) {
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3301      	adds	r3, #1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b09      	cmp	r3, #9
 8000760:	d9ba      	bls.n	80006d8 <SCH_Update+0xc>
            }
        }
    }
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000108 	.word	0x20000108

08000774 <SCH_AddTask>:

void SCH_AddTask(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000774:	b480      	push	{r7}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
    unsigned char Index = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	75fb      	strb	r3, [r7, #23]
    while ((SCH_Task_List[Index].pTask != 0) && (Index < SCH_MAX_TASK)) {
 8000784:	e002      	b.n	800078c <SCH_AddTask+0x18>
        Index++;
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	3301      	adds	r3, #1
 800078a:	75fb      	strb	r3, [r7, #23]
    while ((SCH_Task_List[Index].pTask != 0) && (Index < SCH_MAX_TASK)) {
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <SCH_AddTask+0x78>)
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	4413      	add	r3, r2
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <SCH_AddTask+0x2c>
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	2b09      	cmp	r3, #9
 800079e:	d9f2      	bls.n	8000786 <SCH_AddTask+0x12>
    }
    if (Index == SCH_MAX_TASK) {
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	d102      	bne.n	80007ac <SCH_AddTask+0x38>
        ERROR_CODE = ERROR_SCH_REACH_MAX_TASKS;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <SCH_AddTask+0x7c>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	701a      	strb	r2, [r3, #0]
    }
    SCH_Task_List[Index].pTask = pFunction;
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <SCH_AddTask+0x78>)
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	4413      	add	r3, r2
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	601a      	str	r2, [r3, #0]
    SCH_Task_List[Index].Delay = DELAY;
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <SCH_AddTask+0x78>)
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	4413      	add	r3, r2
 80007c0:	3304      	adds	r3, #4
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	601a      	str	r2, [r3, #0]
    SCH_Task_List[Index].Period = PERIOD;
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	4a08      	ldr	r2, [pc, #32]	; (80007ec <SCH_AddTask+0x78>)
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	4413      	add	r3, r2
 80007ce:	3308      	adds	r3, #8
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	601a      	str	r2, [r3, #0]
    SCH_Task_List[Index].RunMe = 0;
 80007d4:	7dfb      	ldrb	r3, [r7, #23]
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <SCH_AddTask+0x78>)
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	4413      	add	r3, r2
 80007dc:	330c      	adds	r3, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
}
 80007e2:	bf00      	nop
 80007e4:	371c      	adds	r7, #28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000108 	.word	0x20000108
 80007f0:	200001a8 	.word	0x200001a8

080007f4 <SCH_Dispatch>:

void SCH_Dispatch() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
    for (uint8_t Index = 0; Index < SCH_MAX_TASK; Index++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	e030      	b.n	8000862 <SCH_Dispatch+0x6e>
        if (SCH_Task_List[Index].RunMe > 0) {
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <SCH_Dispatch+0x80>)
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4413      	add	r3, r2
 8000808:	330c      	adds	r3, #12
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d025      	beq.n	800085c <SCH_Dispatch+0x68>
            (*SCH_Task_List[Index].pTask)();
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <SCH_Dispatch+0x80>)
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	4413      	add	r3, r2
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4798      	blx	r3
            SCH_Task_List[Index].RunMe -= 1;
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <SCH_Dispatch+0x80>)
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	4413      	add	r3, r2
 8000824:	330c      	adds	r3, #12
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	3a01      	subs	r2, #1
 800082c:	b2d1      	uxtb	r1, r2
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <SCH_Dispatch+0x80>)
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	4413      	add	r3, r2
 8000834:	330c      	adds	r3, #12
 8000836:	460a      	mov	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
            if (SCH_Task_List[Index].Period == 0) {
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <SCH_Dispatch+0x80>)
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	4413      	add	r3, r2
 8000842:	3308      	adds	r3, #8
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d108      	bne.n	800085c <SCH_Dispatch+0x68>
        		memset(&SCH_Task_List[Index], 0, sizeof(STask));
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	4a09      	ldr	r2, [pc, #36]	; (8000874 <SCH_Dispatch+0x80>)
 8000850:	4413      	add	r3, r2
 8000852:	2210      	movs	r2, #16
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fe6c 	bl	8005534 <memset>
    for (uint8_t Index = 0; Index < SCH_MAX_TASK; Index++) {
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3301      	adds	r3, #1
 8000860:	71fb      	strb	r3, [r7, #7]
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b09      	cmp	r3, #9
 8000866:	d9cb      	bls.n	8000800 <SCH_Dispatch+0xc>
        }
    }
#ifdef SCH_REPORT_STATUS
    SCH_ReportStatus();
#endif
    SCH_GoSleep();
 8000868:	f000 f82e 	bl	80008c8 <SCH_GoSleep>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000108 	.word	0x20000108

08000878 <SCH_DeleteTask>:

R_CODE SCH_DeleteTask(const void (*pFunction)()){
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < SCH_MAX_TASK; i++){
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e015      	b.n	80008b2 <SCH_DeleteTask+0x3a>
    	if(SCH_Task_List[i].pTask == pFunction){
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <SCH_DeleteTask+0x4c>)
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	4413      	add	r3, r2
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	429a      	cmp	r2, r3
 8000894:	d10a      	bne.n	80008ac <SCH_DeleteTask+0x34>
    		memset(&SCH_Task_List[i], 0, sizeof(STask));
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <SCH_DeleteTask+0x4c>)
 800089c:	4413      	add	r3, r2
 800089e:	2210      	movs	r2, #16
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fe46 	bl	8005534 <memset>
    		return DONE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e006      	b.n	80008ba <SCH_DeleteTask+0x42>
    for(uint8_t i = 0; i < SCH_MAX_TASK; i++){
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	3301      	adds	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	2b09      	cmp	r3, #9
 80008b6:	d9e6      	bls.n	8000886 <SCH_DeleteTask+0xe>
    	}
    }
    return FAILED;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000108 	.word	0x20000108

080008c8 <SCH_GoSleep>:
    #endif
}
#endif
#endif

void SCH_GoSleep(){
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	__WFI(); // System wait for interrupt
 80008cc:	bf30      	wfi
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
	...

080008d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e8:	d106      	bne.n	80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>
		button_reading();
 80008ea:	f000 fc31 	bl	8001150 <button_reading>
		SCH_Update();
 80008ee:	f7ff feed 	bl	80006cc <SCH_Update>
		HAL_IWDG_Refresh(&hiwdg);
 80008f2:	4803      	ldr	r0, [pc, #12]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008f4:	f003 fdf8 	bl	80044e8 <HAL_IWDG_Refresh>
	}
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000200 	.word	0x20000200

08000904 <fsm_input_driven_normal>:
config_mode Cmode = WAIT;

uint8_t fsm_input_driven_normal_StateChange = 1;
uint8_t fsm_input_driven_config_StateChange = 1;

void fsm_input_driven_normal(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	switch(Nmode){
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <fsm_input_driven_normal+0x1bc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b03      	cmp	r3, #3
 800090e:	f200 80d1 	bhi.w	8000ab4 <fsm_input_driven_normal+0x1b0>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <fsm_input_driven_normal+0x14>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000929 	.word	0x08000929
 800091c:	080009a9 	.word	0x080009a9
 8000920:	08000a05 	.word	0x08000a05
 8000924:	08000a5d 	.word	0x08000a5d
	case NORMAL:
		if(flagForButtonPress[1] == 1){
 8000928:	4b66      	ldr	r3, [pc, #408]	; (8000ac4 <fsm_input_driven_normal+0x1c0>)
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d108      	bne.n	8000942 <fsm_input_driven_normal+0x3e>
			fsm_input_driven_normal_StateChange = 1;
 8000930:	4b65      	ldr	r3, [pc, #404]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
			Nmode = FREEZE;
 8000936:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <fsm_input_driven_normal+0x1bc>)
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 800093c:	f000 fd3e 	bl	80013bc <resetButtonFlag>
				fsm_input_driven_normal_StateChange = 0;
			}
			fsm_traffic(&t_mode_main, &main_traffic);
			fsm_traffic(&t_mode_side, &side_traffic);
		}
		break;
 8000940:	e0bc      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
		else if(flagForButtonPress[2] == 1){
 8000942:	4b60      	ldr	r3, [pc, #384]	; (8000ac4 <fsm_input_driven_normal+0x1c0>)
 8000944:	789b      	ldrb	r3, [r3, #2]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d108      	bne.n	800095c <fsm_input_driven_normal+0x58>
			fsm_input_driven_normal_StateChange = 1;
 800094a:	4b5f      	ldr	r3, [pc, #380]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
			Nmode = FORWARD;
 8000950:	4b5b      	ldr	r3, [pc, #364]	; (8000ac0 <fsm_input_driven_normal+0x1bc>)
 8000952:	2203      	movs	r2, #3
 8000954:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000956:	f000 fd31 	bl	80013bc <resetButtonFlag>
		break;
 800095a:	e0af      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
		else if(flagForButtonHold[2] == 1){
 800095c:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <fsm_input_driven_normal+0x1c8>)
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d108      	bne.n	8000976 <fsm_input_driven_normal+0x72>
			fsm_input_driven_normal_StateChange = 1;
 8000964:	4b58      	ldr	r3, [pc, #352]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
			Nmode = FAST;
 800096a:	4b55      	ldr	r3, [pc, #340]	; (8000ac0 <fsm_input_driven_normal+0x1bc>)
 800096c:	2202      	movs	r2, #2
 800096e:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000970:	f000 fd24 	bl	80013bc <resetButtonFlag>
		break;
 8000974:	e0a2      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
			if(fsm_input_driven_normal_StateChange){
 8000976:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00b      	beq.n	8000996 <fsm_input_driven_normal+0x92>
				sprintf(currentMode, "NORMAL");
 800097e:	4954      	ldr	r1, [pc, #336]	; (8000ad0 <fsm_input_driven_normal+0x1cc>)
 8000980:	4854      	ldr	r0, [pc, #336]	; (8000ad4 <fsm_input_driven_normal+0x1d0>)
 8000982:	f004 fddf 	bl	8005544 <siprintf>
				SCH_AddTask(timeCountDown, 100, 100);
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	2164      	movs	r1, #100	; 0x64
 800098a:	4853      	ldr	r0, [pc, #332]	; (8000ad8 <fsm_input_driven_normal+0x1d4>)
 800098c:	f7ff fef2 	bl	8000774 <SCH_AddTask>
				fsm_input_driven_normal_StateChange = 0;
 8000990:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
			fsm_traffic(&t_mode_main, &main_traffic);
 8000996:	4951      	ldr	r1, [pc, #324]	; (8000adc <fsm_input_driven_normal+0x1d8>)
 8000998:	4851      	ldr	r0, [pc, #324]	; (8000ae0 <fsm_input_driven_normal+0x1dc>)
 800099a:	f001 f867 	bl	8001a6c <fsm_traffic>
			fsm_traffic(&t_mode_side, &side_traffic);
 800099e:	4951      	ldr	r1, [pc, #324]	; (8000ae4 <fsm_input_driven_normal+0x1e0>)
 80009a0:	4851      	ldr	r0, [pc, #324]	; (8000ae8 <fsm_input_driven_normal+0x1e4>)
 80009a2:	f001 f863 	bl	8001a6c <fsm_traffic>
		break;
 80009a6:	e089      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
	case FREEZE:
		if(flagForButtonPress[1] == 1){// CHECK BUTTON
 80009a8:	4b46      	ldr	r3, [pc, #280]	; (8000ac4 <fsm_input_driven_normal+0x1c0>)
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d108      	bne.n	80009c2 <fsm_input_driven_normal+0xbe>
			fsm_input_driven_normal_StateChange = 1;
 80009b0:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
			Nmode = NORMAL;
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <fsm_input_driven_normal+0x1bc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 80009bc:	f000 fcfe 	bl	80013bc <resetButtonFlag>
				fsm_input_driven_normal_StateChange = 0;
			}
			fsm_traffic(&t_mode_main, &main_traffic);
			fsm_traffic(&t_mode_side, &side_traffic);
		}
		break;
 80009c0:	e07c      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
		else if(flagForButtonPress[2] == 1){
 80009c2:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <fsm_input_driven_normal+0x1c0>)
 80009c4:	789b      	ldrb	r3, [r3, #2]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d105      	bne.n	80009d6 <fsm_input_driven_normal+0xd2>
			Nmode = FORWARD;
 80009ca:	4b3d      	ldr	r3, [pc, #244]	; (8000ac0 <fsm_input_driven_normal+0x1bc>)
 80009cc:	2203      	movs	r2, #3
 80009ce:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 80009d0:	f000 fcf4 	bl	80013bc <resetButtonFlag>
		break;
 80009d4:	e072      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
			if(fsm_input_driven_normal_StateChange){
 80009d6:	4b3c      	ldr	r3, [pc, #240]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d009      	beq.n	80009f2 <fsm_input_driven_normal+0xee>
				sprintf(currentMode, "FREEZE");
 80009de:	4943      	ldr	r1, [pc, #268]	; (8000aec <fsm_input_driven_normal+0x1e8>)
 80009e0:	483c      	ldr	r0, [pc, #240]	; (8000ad4 <fsm_input_driven_normal+0x1d0>)
 80009e2:	f004 fdaf 	bl	8005544 <siprintf>
				SCH_DeleteTask(timeCountDown);
 80009e6:	483c      	ldr	r0, [pc, #240]	; (8000ad8 <fsm_input_driven_normal+0x1d4>)
 80009e8:	f7ff ff46 	bl	8000878 <SCH_DeleteTask>
				fsm_input_driven_normal_StateChange = 0;
 80009ec:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
			fsm_traffic(&t_mode_main, &main_traffic);
 80009f2:	493a      	ldr	r1, [pc, #232]	; (8000adc <fsm_input_driven_normal+0x1d8>)
 80009f4:	483a      	ldr	r0, [pc, #232]	; (8000ae0 <fsm_input_driven_normal+0x1dc>)
 80009f6:	f001 f839 	bl	8001a6c <fsm_traffic>
			fsm_traffic(&t_mode_side, &side_traffic);
 80009fa:	493a      	ldr	r1, [pc, #232]	; (8000ae4 <fsm_input_driven_normal+0x1e0>)
 80009fc:	483a      	ldr	r0, [pc, #232]	; (8000ae8 <fsm_input_driven_normal+0x1e4>)
 80009fe:	f001 f835 	bl	8001a6c <fsm_traffic>
		break;
 8000a02:	e05b      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
	case FAST:
		if(BUTTON[2] == HOLD){
 8000a04:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <fsm_input_driven_normal+0x1ec>)
 8000a06:	789b      	ldrb	r3, [r3, #2]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d11b      	bne.n	8000a44 <fsm_input_driven_normal+0x140>
			if(fsm_input_driven_normal_StateChange){
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00e      	beq.n	8000a32 <fsm_input_driven_normal+0x12e>
				sprintf(currentMode, "FAST  ");
 8000a14:	4937      	ldr	r1, [pc, #220]	; (8000af4 <fsm_input_driven_normal+0x1f0>)
 8000a16:	482f      	ldr	r0, [pc, #188]	; (8000ad4 <fsm_input_driven_normal+0x1d0>)
 8000a18:	f004 fd94 	bl	8005544 <siprintf>
				SCH_DeleteTask(timeCountDown);
 8000a1c:	482e      	ldr	r0, [pc, #184]	; (8000ad8 <fsm_input_driven_normal+0x1d4>)
 8000a1e:	f7ff ff2b 	bl	8000878 <SCH_DeleteTask>
				SCH_AddTask(timeCountDown, 50, 50);
 8000a22:	2232      	movs	r2, #50	; 0x32
 8000a24:	2132      	movs	r1, #50	; 0x32
 8000a26:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <fsm_input_driven_normal+0x1d4>)
 8000a28:	f7ff fea4 	bl	8000774 <SCH_AddTask>
				fsm_input_driven_normal_StateChange = 0;
 8000a2c:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
			}
			fsm_traffic(&t_mode_main, &main_traffic);
 8000a32:	492a      	ldr	r1, [pc, #168]	; (8000adc <fsm_input_driven_normal+0x1d8>)
 8000a34:	482a      	ldr	r0, [pc, #168]	; (8000ae0 <fsm_input_driven_normal+0x1dc>)
 8000a36:	f001 f819 	bl	8001a6c <fsm_traffic>
			fsm_traffic(&t_mode_side, &side_traffic);
 8000a3a:	492a      	ldr	r1, [pc, #168]	; (8000ae4 <fsm_input_driven_normal+0x1e0>)
 8000a3c:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <fsm_input_driven_normal+0x1e4>)
 8000a3e:	f001 f815 	bl	8001a6c <fsm_traffic>
			SCH_DeleteTask(timeCountDown);
			fsm_input_driven_normal_StateChange = 1;
			Nmode = NORMAL;
			resetButtonFlag();
		}
		break;
 8000a42:	e03b      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
			SCH_DeleteTask(timeCountDown);
 8000a44:	4824      	ldr	r0, [pc, #144]	; (8000ad8 <fsm_input_driven_normal+0x1d4>)
 8000a46:	f7ff ff17 	bl	8000878 <SCH_DeleteTask>
			fsm_input_driven_normal_StateChange = 1;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
			Nmode = NORMAL;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <fsm_input_driven_normal+0x1bc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000a56:	f000 fcb1 	bl	80013bc <resetButtonFlag>
		break;
 8000a5a:	e02f      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
	case FORWARD:
		SCH_DeleteTask(timeCountDown);
 8000a5c:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <fsm_input_driven_normal+0x1d4>)
 8000a5e:	f7ff ff0b 	bl	8000878 <SCH_DeleteTask>
		if(main_traffic.count_down > side_traffic.count_down){
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <fsm_input_driven_normal+0x1d8>)
 8000a64:	785a      	ldrb	r2, [r3, #1]
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <fsm_input_driven_normal+0x1e0>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d90b      	bls.n	8000a86 <fsm_input_driven_normal+0x182>
			main_traffic.count_down -= side_traffic.count_down;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <fsm_input_driven_normal+0x1d8>)
 8000a70:	785a      	ldrb	r2, [r3, #1]
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <fsm_input_driven_normal+0x1e0>)
 8000a74:	785b      	ldrb	r3, [r3, #1]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <fsm_input_driven_normal+0x1d8>)
 8000a7c:	705a      	strb	r2, [r3, #1]
			side_traffic.count_down = 0;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <fsm_input_driven_normal+0x1e0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	705a      	strb	r2, [r3, #1]
 8000a84:	e00a      	b.n	8000a9c <fsm_input_driven_normal+0x198>
		}
		else{
			side_traffic.count_down -= main_traffic.count_down;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <fsm_input_driven_normal+0x1e0>)
 8000a88:	785a      	ldrb	r2, [r3, #1]
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <fsm_input_driven_normal+0x1d8>)
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <fsm_input_driven_normal+0x1e0>)
 8000a94:	705a      	strb	r2, [r3, #1]
			main_traffic.count_down = 0;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <fsm_input_driven_normal+0x1d8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	705a      	strb	r2, [r3, #1]
		}
		updateLCD(traffic);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 fa6f 	bl	8000f80 <updateLCD>
		fsm_input_driven_normal_StateChange = 1;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <fsm_input_driven_normal+0x1c4>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
		Nmode = FREEZE;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <fsm_input_driven_normal+0x1bc>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
		resetButtonFlag();
 8000aae:	f000 fc85 	bl	80013bc <resetButtonFlag>
		break;
 8000ab2:	e003      	b.n	8000abc <fsm_input_driven_normal+0x1b8>
	default:
		Nmode = NORMAL;
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <fsm_input_driven_normal+0x1bc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
		break;
 8000aba:	bf00      	nop
	}
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000a8 	.word	0x200000a8
 8000ac4:	200000f4 	.word	0x200000f4
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	200000e8 	.word	0x200000e8
 8000ad0:	08005e70 	.word	0x08005e70
 8000ad4:	200000ec 	.word	0x200000ec
 8000ad8:	08000301 	.word	0x08000301
 8000adc:	20000004 	.word	0x20000004
 8000ae0:	200000d0 	.word	0x200000d0
 8000ae4:	2000000c 	.word	0x2000000c
 8000ae8:	2000001c 	.word	0x2000001c
 8000aec:	08005e78 	.word	0x08005e78
 8000af0:	200000e4 	.word	0x200000e4
 8000af4:	08005e80 	.word	0x08005e80

08000af8 <fsm_input_driven_config>:

void fsm_input_driven_config(uint8_t* time1, uint8_t* time2){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
	switch(Cmode){
 8000b02:	4b72      	ldr	r3, [pc, #456]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	f200 80d2 	bhi.w	8000cb0 <fsm_input_driven_config+0x1b8>
 8000b0c:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <fsm_input_driven_config+0x1c>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b29 	.word	0x08000b29
 8000b18:	08000bf5 	.word	0x08000bf5
 8000b1c:	08000c1f 	.word	0x08000c1f
 8000b20:	08000c53 	.word	0x08000c53
 8000b24:	08000c7d 	.word	0x08000c7d
	case WAIT:
		if(flagForButtonPress[1] == 1){
 8000b28:	4b69      	ldr	r3, [pc, #420]	; (8000cd0 <fsm_input_driven_config+0x1d8>)
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d105      	bne.n	8000b3c <fsm_input_driven_config+0x44>
			Cmode = UP;
 8000b30:	4b66      	ldr	r3, [pc, #408]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000b36:	f000 fc41 	bl	80013bc <resetButtonFlag>
			if(fsm_input_driven_config_StateChange){
				// NOTHING HERE
				fsm_input_driven_config_StateChange = 0;
			}
		}
		break;
 8000b3a:	e0bd      	b.n	8000cb8 <fsm_input_driven_config+0x1c0>
		else if(flagForButtonHold[1] == 1){
 8000b3c:	4b65      	ldr	r3, [pc, #404]	; (8000cd4 <fsm_input_driven_config+0x1dc>)
 8000b3e:	785b      	ldrb	r3, [r3, #1]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d108      	bne.n	8000b56 <fsm_input_driven_config+0x5e>
			fsm_input_driven_config_StateChange = 1;
 8000b44:	4b64      	ldr	r3, [pc, #400]	; (8000cd8 <fsm_input_driven_config+0x1e0>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
			Cmode = UP_FAST;
 8000b4a:	4b60      	ldr	r3, [pc, #384]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000b50:	f000 fc34 	bl	80013bc <resetButtonFlag>
		break;
 8000b54:	e0b0      	b.n	8000cb8 <fsm_input_driven_config+0x1c0>
		else if(flagForButtonDoubleTap[1] == 1){
 8000b56:	4b61      	ldr	r3, [pc, #388]	; (8000cdc <fsm_input_driven_config+0x1e4>)
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d105      	bne.n	8000b6a <fsm_input_driven_config+0x72>
			Cmode = DOWN;
 8000b5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000b60:	2203      	movs	r2, #3
 8000b62:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000b64:	f000 fc2a 	bl	80013bc <resetButtonFlag>
		break;
 8000b68:	e0a6      	b.n	8000cb8 <fsm_input_driven_config+0x1c0>
		else if(flagForButtonTapHold[1] == 1){
 8000b6a:	4b5d      	ldr	r3, [pc, #372]	; (8000ce0 <fsm_input_driven_config+0x1e8>)
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d108      	bne.n	8000b84 <fsm_input_driven_config+0x8c>
			fsm_input_driven_config_StateChange = 1;
 8000b72:	4b59      	ldr	r3, [pc, #356]	; (8000cd8 <fsm_input_driven_config+0x1e0>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
			Cmode = DOWN_FAST;
 8000b78:	4b54      	ldr	r3, [pc, #336]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000b7e:	f000 fc1d 	bl	80013bc <resetButtonFlag>
		break;
 8000b82:	e099      	b.n	8000cb8 <fsm_input_driven_config+0x1c0>
		else if(flagForButtonPress[2] == 1){
 8000b84:	4b52      	ldr	r3, [pc, #328]	; (8000cd0 <fsm_input_driven_config+0x1d8>)
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d12b      	bne.n	8000be4 <fsm_input_driven_config+0xec>
			if(mainCountDown != 0){
 8000b8c:	4b55      	ldr	r3, [pc, #340]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f000 8091 	beq.w	8000cb8 <fsm_input_driven_config+0x1c0>
				if(mainCountDown >= *time1){
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	4b52      	ldr	r3, [pc, #328]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d80c      	bhi.n	8000bbc <fsm_input_driven_config+0xc4>
					*time2 = *time2 + (mainCountDown - *time1);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	4b4f      	ldr	r3, [pc, #316]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000ba8:	7819      	ldrb	r1, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	1acb      	subs	r3, r1, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e00b      	b.n	8000bd4 <fsm_input_driven_config+0xdc>
					*time2 = *time2 - (*time1 - mainCountDown);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	4b48      	ldr	r3, [pc, #288]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000bc2:	7819      	ldrb	r1, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	1acb      	subs	r3, r1, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4413      	add	r3, r2
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	701a      	strb	r2, [r3, #0]
				*time1 = mainCountDown;
 8000bd4:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	701a      	strb	r2, [r3, #0]
				flag_updateCountDown = 1;
 8000bdc:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <fsm_input_driven_config+0x1f0>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
		break;
 8000be2:	e069      	b.n	8000cb8 <fsm_input_driven_config+0x1c0>
			if(fsm_input_driven_config_StateChange){
 8000be4:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <fsm_input_driven_config+0x1e0>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d065      	beq.n	8000cb8 <fsm_input_driven_config+0x1c0>
				fsm_input_driven_config_StateChange = 0;
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <fsm_input_driven_config+0x1e0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
		break;
 8000bf2:	e061      	b.n	8000cb8 <fsm_input_driven_config+0x1c0>
	case UP:
		if(mainCountDown < MAX_COUNT_DOWN) mainCountDown++;
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b62      	cmp	r3, #98	; 0x62
 8000bfa:	d806      	bhi.n	8000c0a <fsm_input_driven_config+0x112>
 8000bfc:	4b39      	ldr	r3, [pc, #228]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e002      	b.n	8000c10 <fsm_input_driven_config+0x118>
		else mainCountDown = 0;
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
		updateLCD(counter);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 f9b5 	bl	8000f80 <updateLCD>
		Cmode = WAIT;
 8000c16:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
		break;
 8000c1c:	e051      	b.n	8000cc2 <fsm_input_driven_config+0x1ca>
	case UP_FAST:
		if(BUTTON[1] == HOLD){
 8000c1e:	4b33      	ldr	r3, [pc, #204]	; (8000cec <fsm_input_driven_config+0x1f4>)
 8000c20:	785b      	ldrb	r3, [r3, #1]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d10c      	bne.n	8000c40 <fsm_input_driven_config+0x148>
			if(fsm_input_driven_config_StateChange){
 8000c26:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <fsm_input_driven_config+0x1e0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d046      	beq.n	8000cbc <fsm_input_driven_config+0x1c4>
				SCH_AddTask(timeCountUpFast, 25, 25);
 8000c2e:	2219      	movs	r2, #25
 8000c30:	2119      	movs	r1, #25
 8000c32:	482f      	ldr	r0, [pc, #188]	; (8000cf0 <fsm_input_driven_config+0x1f8>)
 8000c34:	f7ff fd9e 	bl	8000774 <SCH_AddTask>
				fsm_input_driven_config_StateChange = 0;
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <fsm_input_driven_config+0x1e0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		else{
			SCH_DeleteTask(timeCountUpFast);
			resetButtonFlag();
			Cmode = WAIT;
		}
		break;
 8000c3e:	e03d      	b.n	8000cbc <fsm_input_driven_config+0x1c4>
			SCH_DeleteTask(timeCountUpFast);
 8000c40:	482b      	ldr	r0, [pc, #172]	; (8000cf0 <fsm_input_driven_config+0x1f8>)
 8000c42:	f7ff fe19 	bl	8000878 <SCH_DeleteTask>
			resetButtonFlag();
 8000c46:	f000 fbb9 	bl	80013bc <resetButtonFlag>
			Cmode = WAIT;
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
		break;
 8000c50:	e034      	b.n	8000cbc <fsm_input_driven_config+0x1c4>
	case DOWN:
		if(mainCountDown > 0) mainCountDown--;
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <fsm_input_driven_config+0x170>
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e002      	b.n	8000c6e <fsm_input_driven_config+0x176>
		else mainCountDown = MAX_COUNT_DOWN;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <fsm_input_driven_config+0x1ec>)
 8000c6a:	2263      	movs	r2, #99	; 0x63
 8000c6c:	701a      	strb	r2, [r3, #0]
		updateLCD(counter);
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f000 f986 	bl	8000f80 <updateLCD>
		Cmode = WAIT;
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
		break;
 8000c7a:	e022      	b.n	8000cc2 <fsm_input_driven_config+0x1ca>
	case DOWN_FAST:
		if(BUTTON[1] == TAP_HOLD){
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <fsm_input_driven_config+0x1f4>)
 8000c7e:	785b      	ldrb	r3, [r3, #1]
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d10c      	bne.n	8000c9e <fsm_input_driven_config+0x1a6>
			if(fsm_input_driven_config_StateChange){
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <fsm_input_driven_config+0x1e0>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d019      	beq.n	8000cc0 <fsm_input_driven_config+0x1c8>
				SCH_AddTask(timeCountDownFast, 25, 25);
 8000c8c:	2219      	movs	r2, #25
 8000c8e:	2119      	movs	r1, #25
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <fsm_input_driven_config+0x1fc>)
 8000c92:	f7ff fd6f 	bl	8000774 <SCH_AddTask>
				fsm_input_driven_config_StateChange = 0;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <fsm_input_driven_config+0x1e0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
		else{
			SCH_DeleteTask(timeCountDownFast);
			resetButtonFlag();
			Cmode = WAIT;
		}
		break;
 8000c9c:	e010      	b.n	8000cc0 <fsm_input_driven_config+0x1c8>
			SCH_DeleteTask(timeCountDownFast);
 8000c9e:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <fsm_input_driven_config+0x1fc>)
 8000ca0:	f7ff fdea 	bl	8000878 <SCH_DeleteTask>
			resetButtonFlag();
 8000ca4:	f000 fb8a 	bl	80013bc <resetButtonFlag>
			Cmode = WAIT;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
		break;
 8000cae:	e007      	b.n	8000cc0 <fsm_input_driven_config+0x1c8>
	default:
		Cmode = WAIT;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <fsm_input_driven_config+0x1d4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
		break;
 8000cb6:	e004      	b.n	8000cc2 <fsm_input_driven_config+0x1ca>
		break;
 8000cb8:	bf00      	nop
 8000cba:	e002      	b.n	8000cc2 <fsm_input_driven_config+0x1ca>
		break;
 8000cbc:	bf00      	nop
 8000cbe:	e000      	b.n	8000cc2 <fsm_input_driven_config+0x1ca>
		break;
 8000cc0:	bf00      	nop
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000a9 	.word	0x200000a9
 8000cd0:	200000f4 	.word	0x200000f4
 8000cd4:	200000e8 	.word	0x200000e8
 8000cd8:	20000001 	.word	0x20000001
 8000cdc:	200000dc 	.word	0x200000dc
 8000ce0:	200000f8 	.word	0x200000f8
 8000ce4:	200000eb 	.word	0x200000eb
 8000ce8:	200000df 	.word	0x200000df
 8000cec:	200000e4 	.word	0x200000e4
 8000cf0:	08000341 	.word	0x08000341
 8000cf4:	08000371 	.word	0x08000371

08000cf8 <flushLed>:

void flushLed(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	LedTraffic(main_way, LED_OFF);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f95c 	bl	8000fbc <LedTraffic>
	LedTraffic(side_way, LED_OFF);
 8000d04:	2100      	movs	r1, #0
 8000d06:	2001      	movs	r0, #1
 8000d08:	f000 f958 	bl	8000fbc <LedTraffic>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d14:	f3bf 8f4f 	dsb	sy
}
 8000d18:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <__NVIC_SystemReset+0x24>)
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d22:	4904      	ldr	r1, [pc, #16]	; (8000d34 <__NVIC_SystemReset+0x24>)
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_SystemReset+0x28>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d2a:	f3bf 8f4f 	dsb	sy
}
 8000d2e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <__NVIC_SystemReset+0x20>
 8000d34:	e000ed00 	.word	0xe000ed00
 8000d38:	05fa0004 	.word	0x05fa0004

08000d3c <fsm_run>:
#include "LCD_I2C.h"

uint8_t fsm_run_StateChange = 1;
ledColor color = 0;

void fsm_run(machine_state mode){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	if(flagForButtonHold[0] == 1){
 8000d46:	4b76      	ldr	r3, [pc, #472]	; (8000f20 <fsm_run+0x1e4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d106      	bne.n	8000d5c <fsm_run+0x20>
		sprintf(currentMode, "RESET ");
 8000d4e:	4975      	ldr	r1, [pc, #468]	; (8000f24 <fsm_run+0x1e8>)
 8000d50:	4875      	ldr	r0, [pc, #468]	; (8000f28 <fsm_run+0x1ec>)
 8000d52:	f004 fbf7 	bl	8005544 <siprintf>
		m_mode = modeReset;
 8000d56:	4b75      	ldr	r3, [pc, #468]	; (8000f2c <fsm_run+0x1f0>)
 8000d58:	2204      	movs	r2, #4
 8000d5a:	701a      	strb	r2, [r3, #0]
	}
	switch(mode){
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	f200 80d2 	bhi.w	8000f08 <fsm_run+0x1cc>
 8000d64:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <fsm_run+0x30>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	08000dcf 	.word	0x08000dcf
 8000d74:	08000e3d 	.word	0x08000e3d
 8000d78:	08000ea3 	.word	0x08000ea3
	case mode1:// run normally
		if(flagForButtonPress[0] == 1){
 8000d7c:	4b6c      	ldr	r3, [pc, #432]	; (8000f30 <fsm_run+0x1f4>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d10b      	bne.n	8000d9c <fsm_run+0x60>
			fsm_run_StateChange = 1;
 8000d84:	4b6b      	ldr	r3, [pc, #428]	; (8000f34 <fsm_run+0x1f8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
			SCH_DeleteTask(timeCountDown);
 8000d8a:	486b      	ldr	r0, [pc, #428]	; (8000f38 <fsm_run+0x1fc>)
 8000d8c:	f7ff fd74 	bl	8000878 <SCH_DeleteTask>
			m_mode = mode2;
 8000d90:	4b66      	ldr	r3, [pc, #408]	; (8000f2c <fsm_run+0x1f0>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000d96:	f000 fb11 	bl	80013bc <resetButtonFlag>
				fsm_input_driven_normal_StateChange = 1;
				fsm_run_StateChange = 0;
			}
			fsm_input_driven_normal();
		}
		break;
 8000d9a:	e0bc      	b.n	8000f16 <fsm_run+0x1da>
			if(fsm_run_StateChange){
 8000d9c:	4b65      	ldr	r3, [pc, #404]	; (8000f34 <fsm_run+0x1f8>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d011      	beq.n	8000dc8 <fsm_run+0x8c>
				t_mode_main = RED;
 8000da4:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <fsm_run+0x200>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
				t_mode_side = YELLOW;
 8000daa:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <fsm_run+0x204>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
				main_traffic.count_down = 0;
 8000db0:	4b64      	ldr	r3, [pc, #400]	; (8000f44 <fsm_run+0x208>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	705a      	strb	r2, [r3, #1]
				side_traffic.count_down = 0;
 8000db6:	4b64      	ldr	r3, [pc, #400]	; (8000f48 <fsm_run+0x20c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	705a      	strb	r2, [r3, #1]
				fsm_input_driven_normal_StateChange = 1;
 8000dbc:	4b63      	ldr	r3, [pc, #396]	; (8000f4c <fsm_run+0x210>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
				fsm_run_StateChange = 0;
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	; (8000f34 <fsm_run+0x1f8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
			fsm_input_driven_normal();
 8000dc8:	f7ff fd9c 	bl	8000904 <fsm_input_driven_normal>
		break;
 8000dcc:	e0a3      	b.n	8000f16 <fsm_run+0x1da>

	case mode2:
		if(flagForButtonPress[0] == 1){
 8000dce:	4b58      	ldr	r3, [pc, #352]	; (8000f30 <fsm_run+0x1f4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10b      	bne.n	8000dee <fsm_run+0xb2>
			fsm_run_StateChange = 1;
 8000dd6:	4b57      	ldr	r3, [pc, #348]	; (8000f34 <fsm_run+0x1f8>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
			SCH_DeleteTask(toggleLedColor);
 8000ddc:	485c      	ldr	r0, [pc, #368]	; (8000f50 <fsm_run+0x214>)
 8000dde:	f7ff fd4b 	bl	8000878 <SCH_DeleteTask>
			m_mode = mode3;
 8000de2:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <fsm_run+0x1f0>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000de8:	f000 fae8 	bl	80013bc <resetButtonFlag>
				updateLCD(counter);
				fsm_run_StateChange = 0;
			}
			fsm_input_driven_config(&main_traffic.red, &side_traffic.green);
		}
		break;
 8000dec:	e093      	b.n	8000f16 <fsm_run+0x1da>
			if(fsm_run_StateChange){
 8000dee:	4b51      	ldr	r3, [pc, #324]	; (8000f34 <fsm_run+0x1f8>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d01d      	beq.n	8000e32 <fsm_run+0xf6>
				sprintf(currentMode, "CONFIG");
 8000df6:	4957      	ldr	r1, [pc, #348]	; (8000f54 <fsm_run+0x218>)
 8000df8:	484b      	ldr	r0, [pc, #300]	; (8000f28 <fsm_run+0x1ec>)
 8000dfa:	f004 fba3 	bl	8005544 <siprintf>
				flushLed();
 8000dfe:	f7ff ff7b 	bl	8000cf8 <flushLed>
				color = lRED;
 8000e02:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <fsm_run+0x21c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
				TaskPara.para1 = (void*)&color;
 8000e08:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <fsm_run+0x220>)
 8000e0a:	4a53      	ldr	r2, [pc, #332]	; (8000f58 <fsm_run+0x21c>)
 8000e0c:	601a      	str	r2, [r3, #0]
				SCH_AddTask(toggleLedColor, 50, 50);
 8000e0e:	2232      	movs	r2, #50	; 0x32
 8000e10:	2132      	movs	r1, #50	; 0x32
 8000e12:	484f      	ldr	r0, [pc, #316]	; (8000f50 <fsm_run+0x214>)
 8000e14:	f7ff fcae 	bl	8000774 <SCH_AddTask>
				mainCountDown = main_traffic.red;
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <fsm_run+0x208>)
 8000e1a:	789a      	ldrb	r2, [r3, #2]
 8000e1c:	4b50      	ldr	r3, [pc, #320]	; (8000f60 <fsm_run+0x224>)
 8000e1e:	701a      	strb	r2, [r3, #0]
				sideCountDown = 2;
 8000e20:	4b50      	ldr	r3, [pc, #320]	; (8000f64 <fsm_run+0x228>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	701a      	strb	r2, [r3, #0]
				updateLCD(counter);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 f8aa 	bl	8000f80 <updateLCD>
				fsm_run_StateChange = 0;
 8000e2c:	4b41      	ldr	r3, [pc, #260]	; (8000f34 <fsm_run+0x1f8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
			fsm_input_driven_config(&main_traffic.red, &side_traffic.green);
 8000e32:	494d      	ldr	r1, [pc, #308]	; (8000f68 <fsm_run+0x22c>)
 8000e34:	484d      	ldr	r0, [pc, #308]	; (8000f6c <fsm_run+0x230>)
 8000e36:	f7ff fe5f 	bl	8000af8 <fsm_input_driven_config>
		break;
 8000e3a:	e06c      	b.n	8000f16 <fsm_run+0x1da>

	case mode3:
		if(flagForButtonPress[0] == 1){
 8000e3c:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <fsm_run+0x1f4>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d10b      	bne.n	8000e5c <fsm_run+0x120>
			fsm_run_StateChange = 1;
 8000e44:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <fsm_run+0x1f8>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
			SCH_DeleteTask(toggleLedColor);
 8000e4a:	4841      	ldr	r0, [pc, #260]	; (8000f50 <fsm_run+0x214>)
 8000e4c:	f7ff fd14 	bl	8000878 <SCH_DeleteTask>
			m_mode = mode4;
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <fsm_run+0x1f0>)
 8000e52:	2203      	movs	r2, #3
 8000e54:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000e56:	f000 fab1 	bl	80013bc <resetButtonFlag>
				updateLCD(counter);
				fsm_run_StateChange = 0;
			}
			fsm_input_driven_config(&main_traffic.yellow, &side_traffic.red);
		}
		break;
 8000e5a:	e05c      	b.n	8000f16 <fsm_run+0x1da>
			if(fsm_run_StateChange){
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <fsm_run+0x1f8>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d019      	beq.n	8000e98 <fsm_run+0x15c>
				flushLed();
 8000e64:	f7ff ff48 	bl	8000cf8 <flushLed>
				color = lYELLOW;
 8000e68:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <fsm_run+0x21c>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
				TaskPara.para1 = (void*)&color;
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <fsm_run+0x220>)
 8000e70:	4a39      	ldr	r2, [pc, #228]	; (8000f58 <fsm_run+0x21c>)
 8000e72:	601a      	str	r2, [r3, #0]
				SCH_AddTask(toggleLedColor, 50, 50);
 8000e74:	2232      	movs	r2, #50	; 0x32
 8000e76:	2132      	movs	r1, #50	; 0x32
 8000e78:	4835      	ldr	r0, [pc, #212]	; (8000f50 <fsm_run+0x214>)
 8000e7a:	f7ff fc7b 	bl	8000774 <SCH_AddTask>
				mainCountDown = main_traffic.yellow;
 8000e7e:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <fsm_run+0x208>)
 8000e80:	78da      	ldrb	r2, [r3, #3]
 8000e82:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <fsm_run+0x224>)
 8000e84:	701a      	strb	r2, [r3, #0]
				sideCountDown = 3;
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <fsm_run+0x228>)
 8000e88:	2203      	movs	r2, #3
 8000e8a:	701a      	strb	r2, [r3, #0]
				updateLCD(counter);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f000 f877 	bl	8000f80 <updateLCD>
				fsm_run_StateChange = 0;
 8000e92:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <fsm_run+0x1f8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
			fsm_input_driven_config(&main_traffic.yellow, &side_traffic.red);
 8000e98:	4935      	ldr	r1, [pc, #212]	; (8000f70 <fsm_run+0x234>)
 8000e9a:	4836      	ldr	r0, [pc, #216]	; (8000f74 <fsm_run+0x238>)
 8000e9c:	f7ff fe2c 	bl	8000af8 <fsm_input_driven_config>
		break;
 8000ea0:	e039      	b.n	8000f16 <fsm_run+0x1da>

	case mode4:
		if(flagForButtonPress[0] == 1){
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <fsm_run+0x1f4>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d10b      	bne.n	8000ec2 <fsm_run+0x186>
			fsm_run_StateChange = 1;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <fsm_run+0x1f8>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
			SCH_DeleteTask(toggleLedColor);
 8000eb0:	4827      	ldr	r0, [pc, #156]	; (8000f50 <fsm_run+0x214>)
 8000eb2:	f7ff fce1 	bl	8000878 <SCH_DeleteTask>
			m_mode = mode1;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <fsm_run+0x1f0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000ebc:	f000 fa7e 	bl	80013bc <resetButtonFlag>
				updateLCD(counter);
				fsm_run_StateChange = 0;
			}
			fsm_input_driven_config(&main_traffic.green, &side_traffic.red);
		}
		break;
 8000ec0:	e029      	b.n	8000f16 <fsm_run+0x1da>
			if(fsm_run_StateChange){
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <fsm_run+0x1f8>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d019      	beq.n	8000efe <fsm_run+0x1c2>
				flushLed();
 8000eca:	f7ff ff15 	bl	8000cf8 <flushLed>
				color = lGREEN;
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <fsm_run+0x21c>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	701a      	strb	r2, [r3, #0]
				TaskPara.para1 = (void*)&color;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <fsm_run+0x220>)
 8000ed6:	4a20      	ldr	r2, [pc, #128]	; (8000f58 <fsm_run+0x21c>)
 8000ed8:	601a      	str	r2, [r3, #0]
				SCH_AddTask(toggleLedColor, 50, 50);
 8000eda:	2232      	movs	r2, #50	; 0x32
 8000edc:	2132      	movs	r1, #50	; 0x32
 8000ede:	481c      	ldr	r0, [pc, #112]	; (8000f50 <fsm_run+0x214>)
 8000ee0:	f7ff fc48 	bl	8000774 <SCH_AddTask>
				mainCountDown = main_traffic.green;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <fsm_run+0x208>)
 8000ee6:	791a      	ldrb	r2, [r3, #4]
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <fsm_run+0x224>)
 8000eea:	701a      	strb	r2, [r3, #0]
				sideCountDown = 4;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <fsm_run+0x228>)
 8000eee:	2204      	movs	r2, #4
 8000ef0:	701a      	strb	r2, [r3, #0]
				updateLCD(counter);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 f844 	bl	8000f80 <updateLCD>
				fsm_run_StateChange = 0;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <fsm_run+0x1f8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
			fsm_input_driven_config(&main_traffic.green, &side_traffic.red);
 8000efe:	491c      	ldr	r1, [pc, #112]	; (8000f70 <fsm_run+0x234>)
 8000f00:	481d      	ldr	r0, [pc, #116]	; (8000f78 <fsm_run+0x23c>)
 8000f02:	f7ff fdf9 	bl	8000af8 <fsm_input_driven_config>
		break;
 8000f06:	e006      	b.n	8000f16 <fsm_run+0x1da>

	default:// modeReset
		if(BUTTON[0] != HOLD){
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <fsm_run+0x240>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d001      	beq.n	8000f14 <fsm_run+0x1d8>
			NVIC_SystemReset();
 8000f10:	f7ff fefe 	bl	8000d10 <__NVIC_SystemReset>
		}
		break;
 8000f14:	bf00      	nop
	}
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000e8 	.word	0x200000e8
 8000f24:	08005e88 	.word	0x08005e88
 8000f28:	200000ec 	.word	0x200000ec
 8000f2c:	200000ab 	.word	0x200000ab
 8000f30:	200000f4 	.word	0x200000f4
 8000f34:	20000002 	.word	0x20000002
 8000f38:	08000301 	.word	0x08000301
 8000f3c:	200000d0 	.word	0x200000d0
 8000f40:	2000001c 	.word	0x2000001c
 8000f44:	20000004 	.word	0x20000004
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	080005cd 	.word	0x080005cd
 8000f54:	08005e90 	.word	0x08005e90
 8000f58:	200000aa 	.word	0x200000aa
 8000f5c:	200000fc 	.word	0x200000fc
 8000f60:	200000eb 	.word	0x200000eb
 8000f64:	200000e0 	.word	0x200000e0
 8000f68:	20000010 	.word	0x20000010
 8000f6c:	20000006 	.word	0x20000006
 8000f70:	2000000e 	.word	0x2000000e
 8000f74:	20000007 	.word	0x20000007
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	200000e4 	.word	0x200000e4

08000f80 <updateLCD>:
// finite state machine
volatile machine_state m_mode = mode1;

// LCD
uint8_t led_index = 0;
void updateLCD(update_from where){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	if(where == traffic){
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d107      	bne.n	8000fa0 <updateLCD+0x20>
		mainCountDown = main_traffic.count_down;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <updateLCD+0x2c>)
 8000f92:	785a      	ldrb	r2, [r3, #1]
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <updateLCD+0x30>)
 8000f96:	701a      	strb	r2, [r3, #0]
		sideCountDown = side_traffic.count_down;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <updateLCD+0x34>)
 8000f9a:	785a      	ldrb	r2, [r3, #1]
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <updateLCD+0x38>)
 8000f9e:	701a      	strb	r2, [r3, #0]
	}
	else if(where == counter){
		// nothing here
	}
};
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	200000eb 	.word	0x200000eb
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	200000e0 	.word	0x200000e0

08000fbc <LedTraffic>:

// led traffic
void LedTraffic(whichWay way, LED_TRAFFIC led_traffic){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
	if(way == main_way){
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d13e      	bne.n	8001050 <LedTraffic+0x94>
		switch (led_traffic){
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	f200 8081 	bhi.w	80010dc <LedTraffic+0x120>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <LedTraffic+0x24>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08001009 	.word	0x08001009
 8000fe8:	08001021 	.word	0x08001021
 8000fec:	08001039 	.word	0x08001039
			case LED_OFF:
				HAL_GPIO_WritePin(LedMain0_Port, LedMain0_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	483e      	ldr	r0, [pc, #248]	; (80010f0 <LedTraffic+0x134>)
 8000ff6:	f001 f97a 	bl	80022ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LedMain1_Port, LedMain1_Pin, RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001000:	483b      	ldr	r0, [pc, #236]	; (80010f0 <LedTraffic+0x134>)
 8001002:	f001 f974 	bl	80022ee <HAL_GPIO_WritePin>
				break;
 8001006:	e06e      	b.n	80010e6 <LedTraffic+0x12a>
			case LED_RED:
				HAL_GPIO_WritePin(LedMain0_Port, LedMain0_Pin, SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4838      	ldr	r0, [pc, #224]	; (80010f0 <LedTraffic+0x134>)
 800100e:	f001 f96e 	bl	80022ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LedMain1_Port, LedMain1_Pin, SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001018:	4835      	ldr	r0, [pc, #212]	; (80010f0 <LedTraffic+0x134>)
 800101a:	f001 f968 	bl	80022ee <HAL_GPIO_WritePin>
				break;
 800101e:	e062      	b.n	80010e6 <LedTraffic+0x12a>
			case LED_YELLOW:
				HAL_GPIO_WritePin(LedMain0_Port, LedMain0_Pin, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2110      	movs	r1, #16
 8001024:	4832      	ldr	r0, [pc, #200]	; (80010f0 <LedTraffic+0x134>)
 8001026:	f001 f962 	bl	80022ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LedMain1_Port, LedMain1_Pin, SET);
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001030:	482f      	ldr	r0, [pc, #188]	; (80010f0 <LedTraffic+0x134>)
 8001032:	f001 f95c 	bl	80022ee <HAL_GPIO_WritePin>
				break;
 8001036:	e056      	b.n	80010e6 <LedTraffic+0x12a>
			case LED_GREEN:
				HAL_GPIO_WritePin(LedMain0_Port, LedMain0_Pin, SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	482c      	ldr	r0, [pc, #176]	; (80010f0 <LedTraffic+0x134>)
 800103e:	f001 f956 	bl	80022ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LedMain1_Port, LedMain1_Pin, RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001048:	4829      	ldr	r0, [pc, #164]	; (80010f0 <LedTraffic+0x134>)
 800104a:	f001 f950 	bl	80022ee <HAL_GPIO_WritePin>
				break;
 800104e:	e04a      	b.n	80010e6 <LedTraffic+0x12a>
			default:
				break;
		}
	}
	else if(way == side_way){
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d144      	bne.n	80010e0 <LedTraffic+0x124>
		switch (led_traffic){
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	2b03      	cmp	r3, #3
 800105a:	d843      	bhi.n	80010e4 <LedTraffic+0x128>
 800105c:	a201      	add	r2, pc, #4	; (adr r2, 8001064 <LedTraffic+0xa8>)
 800105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001062:	bf00      	nop
 8001064:	08001075 	.word	0x08001075
 8001068:	0800108f 	.word	0x0800108f
 800106c:	080010a9 	.word	0x080010a9
 8001070:	080010c3 	.word	0x080010c3
			case LED_OFF:
				HAL_GPIO_WritePin(LedSide0_Port, LedSide0_Pin, RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	481e      	ldr	r0, [pc, #120]	; (80010f4 <LedTraffic+0x138>)
 800107c:	f001 f937 	bl	80022ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LedSide1_Port, LedSide1_Pin, RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001086:	481b      	ldr	r0, [pc, #108]	; (80010f4 <LedTraffic+0x138>)
 8001088:	f001 f931 	bl	80022ee <HAL_GPIO_WritePin>
				break;
 800108c:	e02b      	b.n	80010e6 <LedTraffic+0x12a>
			case LED_RED:
				HAL_GPIO_WritePin(LedSide0_Port, LedSide0_Pin, SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001094:	4817      	ldr	r0, [pc, #92]	; (80010f4 <LedTraffic+0x138>)
 8001096:	f001 f92a 	bl	80022ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LedSide1_Port, LedSide1_Pin, SET);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a0:	4814      	ldr	r0, [pc, #80]	; (80010f4 <LedTraffic+0x138>)
 80010a2:	f001 f924 	bl	80022ee <HAL_GPIO_WritePin>
				break;
 80010a6:	e01e      	b.n	80010e6 <LedTraffic+0x12a>
			case LED_YELLOW:
				HAL_GPIO_WritePin(LedSide0_Port, LedSide0_Pin, RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <LedTraffic+0x138>)
 80010b0:	f001 f91d 	bl	80022ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LedSide1_Port, LedSide1_Pin, SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <LedTraffic+0x138>)
 80010bc:	f001 f917 	bl	80022ee <HAL_GPIO_WritePin>
				break;
 80010c0:	e011      	b.n	80010e6 <LedTraffic+0x12a>
			case LED_GREEN:
				HAL_GPIO_WritePin(LedSide0_Port, LedSide0_Pin, SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	480a      	ldr	r0, [pc, #40]	; (80010f4 <LedTraffic+0x138>)
 80010ca:	f001 f910 	bl	80022ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LedSide1_Port, LedSide1_Pin, RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <LedTraffic+0x138>)
 80010d6:	f001 f90a 	bl	80022ee <HAL_GPIO_WritePin>
				break;
 80010da:	e004      	b.n	80010e6 <LedTraffic+0x12a>
				break;
 80010dc:	bf00      	nop
 80010de:	e002      	b.n	80010e6 <LedTraffic+0x12a>
			default:
				break;
		}
	}
 80010e0:	bf00      	nop
 80010e2:	e000      	b.n	80010e6 <LedTraffic+0x12a>
				break;
 80010e4:	bf00      	nop
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	40010800 	.word	0x40010800

080010f8 <button_pin_read>:
static uint16_t counterForButtonHold[NUMBER_OF_BUTTONS];
static uint16_t counterForButtonRelease[NUMBER_OF_BUTTONS];
//check initial press
static uint8_t initial_press[NUMBER_OF_BUTTONS];

GPIO_PinState button_pin_read(uint8_t index){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	switch(index){
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d013      	beq.n	8001130 <button_pin_read+0x38>
 8001108:	2b02      	cmp	r3, #2
 800110a:	dc17      	bgt.n	800113c <button_pin_read+0x44>
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <button_pin_read+0x1e>
 8001110:	2b01      	cmp	r3, #1
 8001112:	d007      	beq.n	8001124 <button_pin_read+0x2c>
		break;
	case 2:
		return HAL_GPIO_ReadPin(Button2_Port, Button2_Pin);
		break;
	default:
		break;
 8001114:	e012      	b.n	800113c <button_pin_read+0x44>
		return HAL_GPIO_ReadPin(Button0_Port, Button0_Pin);
 8001116:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <button_pin_read+0x50>)
 800111c:	f001 f8d0 	bl	80022c0 <HAL_GPIO_ReadPin>
 8001120:	4603      	mov	r3, r0
 8001122:	e00d      	b.n	8001140 <button_pin_read+0x48>
		return HAL_GPIO_ReadPin(Button1_Port, Button1_Pin);
 8001124:	2101      	movs	r1, #1
 8001126:	4809      	ldr	r0, [pc, #36]	; (800114c <button_pin_read+0x54>)
 8001128:	f001 f8ca 	bl	80022c0 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	e007      	b.n	8001140 <button_pin_read+0x48>
		return HAL_GPIO_ReadPin(Button2_Port, Button2_Pin);
 8001130:	2102      	movs	r1, #2
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <button_pin_read+0x54>)
 8001134:	f001 f8c4 	bl	80022c0 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	e001      	b.n	8001140 <button_pin_read+0x48>
		break;
 800113c:	bf00      	nop
	}
	return SET;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40011000 	.word	0x40011000
 800114c:	40010800 	.word	0x40010800

08001150 <button_reading>:

void button_reading(){
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001156:	2300      	movs	r3, #0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	e10e      	b.n	800137a <button_reading+0x22a>
    	//DEBOUNCE
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	498a      	ldr	r1, [pc, #552]	; (800138c <button_reading+0x23c>)
 8001162:	5c89      	ldrb	r1, [r1, r2]
 8001164:	4a8a      	ldr	r2, [pc, #552]	; (8001390 <button_reading+0x240>)
 8001166:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = button_pin_read(i);
 8001168:	79fc      	ldrb	r4, [r7, #7]
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffc3 	bl	80010f8 <button_pin_read>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b85      	ldr	r3, [pc, #532]	; (800138c <button_reading+0x23c>)
 8001178:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4a83      	ldr	r2, [pc, #524]	; (800138c <button_reading+0x23c>)
 800117e:	5cd2      	ldrb	r2, [r2, r3]
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	4983      	ldr	r1, [pc, #524]	; (8001390 <button_reading+0x240>)
 8001184:	5ccb      	ldrb	r3, [r1, r3]
 8001186:	429a      	cmp	r2, r3
 8001188:	d105      	bne.n	8001196 <button_reading+0x46>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	497f      	ldr	r1, [pc, #508]	; (800138c <button_reading+0x23c>)
 8001190:	5c89      	ldrb	r1, [r1, r2]
 8001192:	4a80      	ldr	r2, [pc, #512]	; (8001394 <button_reading+0x244>)
 8001194:	54d1      	strb	r1, [r2, r3]

        // UPDATE COUNTER
        if(buttonBuffer[i] == BUTTON_IS_RELEASED){
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4a7e      	ldr	r2, [pc, #504]	; (8001394 <button_reading+0x244>)
 800119a:	5cd3      	ldrb	r3, [r2, r3]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d138      	bne.n	8001212 <button_reading+0xc2>
        	if(initial_press[i] == 5) initial_press[i] = 0;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a7d      	ldr	r2, [pc, #500]	; (8001398 <button_reading+0x248>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	2b05      	cmp	r3, #5
 80011a8:	d103      	bne.n	80011b2 <button_reading+0x62>
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <button_reading+0x248>)
 80011ae:	2100      	movs	r1, #0
 80011b0:	54d1      	strb	r1, [r2, r3]
        	if(initial_press[i] == 6) initial_press[i] = 0;
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a78      	ldr	r2, [pc, #480]	; (8001398 <button_reading+0x248>)
 80011b6:	5cd3      	ldrb	r3, [r2, r3]
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	d103      	bne.n	80011c4 <button_reading+0x74>
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4a76      	ldr	r2, [pc, #472]	; (8001398 <button_reading+0x248>)
 80011c0:	2100      	movs	r1, #0
 80011c2:	54d1      	strb	r1, [r2, r3]
        	if(initial_press[i] == 1) initial_press[i] = 2;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4a74      	ldr	r2, [pc, #464]	; (8001398 <button_reading+0x248>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d103      	bne.n	80011d6 <button_reading+0x86>
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a71      	ldr	r2, [pc, #452]	; (8001398 <button_reading+0x248>)
 80011d2:	2102      	movs	r1, #2
 80011d4:	54d1      	strb	r1, [r2, r3]
        	if(initial_press[i] == 3) initial_press[i] = 4;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4a6f      	ldr	r2, [pc, #444]	; (8001398 <button_reading+0x248>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d103      	bne.n	80011e8 <button_reading+0x98>
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4a6d      	ldr	r2, [pc, #436]	; (8001398 <button_reading+0x248>)
 80011e4:	2104      	movs	r1, #4
 80011e6:	54d1      	strb	r1, [r2, r3]

           	counterForButtonHold[i] = 0;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4a6c      	ldr	r2, [pc, #432]	; (800139c <button_reading+0x24c>)
 80011ec:	2100      	movs	r1, #0
 80011ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
           	if(counterForButtonRelease[i] < RELEASE_TIME) counterForButtonRelease[i]++;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4a6a      	ldr	r2, [pc, #424]	; (80013a0 <button_reading+0x250>)
 80011f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011fa:	2b13      	cmp	r3, #19
 80011fc:	d834      	bhi.n	8001268 <button_reading+0x118>
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4a67      	ldr	r2, [pc, #412]	; (80013a0 <button_reading+0x250>)
 8001202:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001206:	3201      	adds	r2, #1
 8001208:	b291      	uxth	r1, r2
 800120a:	4a65      	ldr	r2, [pc, #404]	; (80013a0 <button_reading+0x250>)
 800120c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001210:	e02a      	b.n	8001268 <button_reading+0x118>
         }
        else if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4a5f      	ldr	r2, [pc, #380]	; (8001394 <button_reading+0x244>)
 8001216:	5cd3      	ldrb	r3, [r2, r3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d125      	bne.n	8001268 <button_reading+0x118>
        	if(initial_press[i] == 0) initial_press[i] = 1;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4a5e      	ldr	r2, [pc, #376]	; (8001398 <button_reading+0x248>)
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d103      	bne.n	800122e <button_reading+0xde>
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a5b      	ldr	r2, [pc, #364]	; (8001398 <button_reading+0x248>)
 800122a:	2101      	movs	r1, #1
 800122c:	54d1      	strb	r1, [r2, r3]
        	if(initial_press[i] == 2) initial_press[i] = 3;
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4a59      	ldr	r2, [pc, #356]	; (8001398 <button_reading+0x248>)
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d103      	bne.n	8001240 <button_reading+0xf0>
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4a57      	ldr	r2, [pc, #348]	; (8001398 <button_reading+0x248>)
 800123c:	2103      	movs	r1, #3
 800123e:	54d1      	strb	r1, [r2, r3]

        	counterForButtonRelease[i] = 0;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4a57      	ldr	r2, [pc, #348]	; (80013a0 <button_reading+0x250>)
 8001244:	2100      	movs	r1, #0
 8001246:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	if(counterForButtonHold[i] < HOLD_TIME) counterForButtonHold[i]++;
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4a53      	ldr	r2, [pc, #332]	; (800139c <button_reading+0x24c>)
 800124e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001252:	2b63      	cmp	r3, #99	; 0x63
 8001254:	d808      	bhi.n	8001268 <button_reading+0x118>
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4a50      	ldr	r2, [pc, #320]	; (800139c <button_reading+0x24c>)
 800125a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800125e:	3201      	adds	r2, #1
 8001260:	b291      	uxth	r1, r2
 8001262:	4a4e      	ldr	r2, [pc, #312]	; (800139c <button_reading+0x24c>)
 8001264:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }

        //REGCONIZE
        if(initial_press[i] == 0){	// IDLE
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4a4b      	ldr	r2, [pc, #300]	; (8001398 <button_reading+0x248>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <button_reading+0x12a>
        	BUTTON[i] = IDLE;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <button_reading+0x254>)
 8001276:	2100      	movs	r1, #0
 8001278:	54d1      	strb	r1, [r2, r3]
        }
        if(initial_press[i] == 1 || initial_press[i] == 5){	// HOLD
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a46      	ldr	r2, [pc, #280]	; (8001398 <button_reading+0x248>)
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d004      	beq.n	800128e <button_reading+0x13e>
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4a44      	ldr	r2, [pc, #272]	; (8001398 <button_reading+0x248>)
 8001288:	5cd3      	ldrb	r3, [r2, r3]
 800128a:	2b05      	cmp	r3, #5
 800128c:	d111      	bne.n	80012b2 <button_reading+0x162>
        	if(counterForButtonHold[i] >= HOLD_TIME){
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	4a42      	ldr	r2, [pc, #264]	; (800139c <button_reading+0x24c>)
 8001292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001296:	2b63      	cmp	r3, #99	; 0x63
 8001298:	d90b      	bls.n	80012b2 <button_reading+0x162>
        		flagForButtonHold[i] = 1;
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <button_reading+0x258>)
 800129e:	2101      	movs	r1, #1
 80012a0:	54d1      	strb	r1, [r2, r3]
        		BUTTON[i] = HOLD;
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4a3f      	ldr	r2, [pc, #252]	; (80013a4 <button_reading+0x254>)
 80012a6:	2102      	movs	r1, #2
 80012a8:	54d1      	strb	r1, [r2, r3]
        		initial_press[i] = 5;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <button_reading+0x248>)
 80012ae:	2105      	movs	r1, #5
 80012b0:	54d1      	strb	r1, [r2, r3]
        	}
        }
        if(initial_press[i] == 2){
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4a38      	ldr	r2, [pc, #224]	; (8001398 <button_reading+0x248>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d111      	bne.n	80012e0 <button_reading+0x190>
        	if(counterForButtonRelease[i] >= RELEASE_TIME){	// PRESS
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4a38      	ldr	r2, [pc, #224]	; (80013a0 <button_reading+0x250>)
 80012c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c4:	2b13      	cmp	r3, #19
 80012c6:	d90b      	bls.n	80012e0 <button_reading+0x190>
        		flagForButtonPress[i] = 1;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <button_reading+0x25c>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	54d1      	strb	r1, [r2, r3]
        		BUTTON[i] = PRESS;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <button_reading+0x254>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	54d1      	strb	r1, [r2, r3]
        		initial_press[i] = 0;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <button_reading+0x248>)
 80012dc:	2100      	movs	r1, #0
 80012de:	54d1      	strb	r1, [r2, r3]
        	}
        }
        if(initial_press[i] == 3 || initial_press[i] == 6){	// TAP HOLD
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <button_reading+0x248>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d004      	beq.n	80012f4 <button_reading+0x1a4>
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4a2a      	ldr	r2, [pc, #168]	; (8001398 <button_reading+0x248>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	2b06      	cmp	r3, #6
 80012f2:	d111      	bne.n	8001318 <button_reading+0x1c8>
        	if(counterForButtonHold[i] >= HOLD_TIME){
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4a29      	ldr	r2, [pc, #164]	; (800139c <button_reading+0x24c>)
 80012f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012fc:	2b63      	cmp	r3, #99	; 0x63
 80012fe:	d90b      	bls.n	8001318 <button_reading+0x1c8>
        		flagForButtonTapHold[i] = 1;
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4a2b      	ldr	r2, [pc, #172]	; (80013b0 <button_reading+0x260>)
 8001304:	2101      	movs	r1, #1
 8001306:	54d1      	strb	r1, [r2, r3]
        		BUTTON[i] = TAP_HOLD;
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <button_reading+0x254>)
 800130c:	2104      	movs	r1, #4
 800130e:	54d1      	strb	r1, [r2, r3]
        		initial_press[i] = 6;
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <button_reading+0x248>)
 8001314:	2106      	movs	r1, #6
 8001316:	54d1      	strb	r1, [r2, r3]
        	}
        }
        if(initial_press[i] == 4){
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <button_reading+0x248>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	2b04      	cmp	r3, #4
 8001320:	d111      	bne.n	8001346 <button_reading+0x1f6>
        	if(counterForButtonRelease[i] >= RELEASE_TIME){	// DOUBLE TAP
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <button_reading+0x250>)
 8001326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132a:	2b13      	cmp	r3, #19
 800132c:	d90b      	bls.n	8001346 <button_reading+0x1f6>
        		flagForButtonDoubleTap[i] = 1;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <button_reading+0x264>)
 8001332:	2101      	movs	r1, #1
 8001334:	54d1      	strb	r1, [r2, r3]
        		BUTTON[i] = DOUBLE_TAP;
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <button_reading+0x254>)
 800133a:	2103      	movs	r1, #3
 800133c:	54d1      	strb	r1, [r2, r3]
        		initial_press[i] = 0;
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	4a15      	ldr	r2, [pc, #84]	; (8001398 <button_reading+0x248>)
 8001342:	2100      	movs	r1, #0
 8001344:	54d1      	strb	r1, [r2, r3]
        	}
        }

#ifdef UNIT_TEST
        if(i == 0) test_button = 0;
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <button_reading+0x202>
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <button_reading+0x268>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
        test_button = test_button | !buttonBuffer[i];
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <button_reading+0x244>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	b25a      	sxtb	r2, r3
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <button_reading+0x268>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b25b      	sxtb	r3, r3
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <button_reading+0x268>)
 8001372:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	3301      	adds	r3, #1
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b02      	cmp	r3, #2
 800137e:	f67f aeed 	bls.w	800115c <button_reading+0xc>
#endif
    }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	200000b0 	.word	0x200000b0
 8001390:	200000b4 	.word	0x200000b4
 8001394:	20000014 	.word	0x20000014
 8001398:	200000c8 	.word	0x200000c8
 800139c:	200000b8 	.word	0x200000b8
 80013a0:	200000c0 	.word	0x200000c0
 80013a4:	200000e4 	.word	0x200000e4
 80013a8:	200000e8 	.word	0x200000e8
 80013ac:	200000f4 	.word	0x200000f4
 80013b0:	200000f8 	.word	0x200000f8
 80013b4:	200000dc 	.word	0x200000dc
 80013b8:	200000ac 	.word	0x200000ac

080013bc <resetButtonFlag>:

void resetButtonFlag(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    memset(flagForButtonPress, 0, sizeof(flagForButtonPress));
 80013c0:	2203      	movs	r2, #3
 80013c2:	2100      	movs	r1, #0
 80013c4:	4809      	ldr	r0, [pc, #36]	; (80013ec <resetButtonFlag+0x30>)
 80013c6:	f004 f8b5 	bl	8005534 <memset>
    memset(flagForButtonHold, 0, sizeof(flagForButtonHold));
 80013ca:	2203      	movs	r2, #3
 80013cc:	2100      	movs	r1, #0
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <resetButtonFlag+0x34>)
 80013d0:	f004 f8b0 	bl	8005534 <memset>
    memset(flagForButtonDoubleTap, 0, sizeof(flagForButtonDoubleTap));
 80013d4:	2203      	movs	r2, #3
 80013d6:	2100      	movs	r1, #0
 80013d8:	4806      	ldr	r0, [pc, #24]	; (80013f4 <resetButtonFlag+0x38>)
 80013da:	f004 f8ab 	bl	8005534 <memset>
    memset(flagForButtonTapHold, 0, sizeof(flagForButtonTapHold));
 80013de:	2203      	movs	r2, #3
 80013e0:	2100      	movs	r1, #0
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <resetButtonFlag+0x3c>)
 80013e4:	f004 f8a6 	bl	8005534 <memset>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200000f4 	.word	0x200000f4
 80013f0:	200000e8 	.word	0x200000e8
 80013f4:	200000dc 	.word	0x200000dc
 80013f8:	200000f8 	.word	0x200000f8

080013fc <unit_test_button_press>:

#ifdef UNIT_TEST
void unit_test_button_press(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	if(test_button == 1) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <unit_test_button_press+0x30>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d105      	bne.n	8001414 <unit_test_button_press+0x18>
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140e:	4808      	ldr	r0, [pc, #32]	; (8001430 <unit_test_button_press+0x34>)
 8001410:	f000 ff6d 	bl	80022ee <HAL_GPIO_WritePin>
	if(test_button == 0) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <unit_test_button_press+0x30>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <unit_test_button_press+0x2c>
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <unit_test_button_press+0x34>)
 8001424:	f000 ff63 	bl	80022ee <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200000ac 	.word	0x200000ac
 8001430:	40011000 	.word	0x40011000

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f000 fba3 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 f84b 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f000 f91f 	bl	8001684 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001446:	f000 f889 	bl	800155c <MX_I2C1_Init>
  MX_TIM2_Init();
 800144a:	f000 f8cf 	bl	80015ec <MX_TIM2_Init>
  MX_IWDG_Init();
 800144e:	f000 f8b3 	bl	80015b8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8001452:	f7ff f921 	bl	8000698 <SCH_Init>
  lcd_init();
 8001456:	f7fe fee3 	bl	8000220 <lcd_init>

  char bufff[17];
  sprintf(bufff, "<SYSTEM RESTART>");
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4919      	ldr	r1, [pc, #100]	; (80014c4 <main+0x90>)
 800145e:	4618      	mov	r0, r3
 8001460:	f004 f870 	bl	8005544 <siprintf>
  lcd_goto_XY(0, 0);
 8001464:	2100      	movs	r1, #0
 8001466:	2000      	movs	r0, #0
 8001468:	f7fe ff24 	bl	80002b4 <lcd_goto_XY>
  lcd_send_string(bufff);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ff04 	bl	800027c <lcd_send_string>
  sprintf(bufff, "Tr Dat (__'){");
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4914      	ldr	r1, [pc, #80]	; (80014c8 <main+0x94>)
 8001478:	4618      	mov	r0, r3
 800147a:	f004 f863 	bl	8005544 <siprintf>
  lcd_goto_XY(1, 0);
 800147e:	2100      	movs	r1, #0
 8001480:	2001      	movs	r0, #1
 8001482:	f7fe ff17 	bl	80002b4 <lcd_goto_XY>
  lcd_send_string(bufff);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe fef7 	bl	800027c <lcd_send_string>
  HAL_Delay(1000);
 800148e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001492:	f000 fbd9 	bl	8001c48 <HAL_Delay>
  lcd_clear_display();
 8001496:	f7fe ff06 	bl	80002a6 <lcd_clear_display>

  SCH_AddTask(LedBlinky, 0, 50);
 800149a:	2232      	movs	r2, #50	; 0x32
 800149c:	2100      	movs	r1, #0
 800149e:	480b      	ldr	r0, [pc, #44]	; (80014cc <main+0x98>)
 80014a0:	f7ff f968 	bl	8000774 <SCH_AddTask>
//  SCH_AddTask(LedBlinky1, 100, 50);
  SCH_AddTask(displayLCD, 50, 50);
 80014a4:	2232      	movs	r2, #50	; 0x32
 80014a6:	2132      	movs	r1, #50	; 0x32
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <main+0x9c>)
 80014aa:	f7ff f963 	bl	8000774 <SCH_AddTask>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef UNIT_TEST
	  	  unit_test_button_press();
 80014ae:	f7ff ffa5 	bl	80013fc <unit_test_button_press>
//	  	  unit_test_button_read();
#endif
	  //	  SCH
	  	  SCH_Dispatch();
 80014b2:	f7ff f99f 	bl	80007f4 <SCH_Dispatch>
	  //	   FSM
	  	  fsm_run(m_mode);
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <main+0xa0>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fc3d 	bl	8000d3c <fsm_run>
	  	  unit_test_button_press();
 80014c2:	e7f4      	b.n	80014ae <main+0x7a>
 80014c4:	08005e98 	.word	0x08005e98
 80014c8:	08005eac 	.word	0x08005eac
 80014cc:	080002ed 	.word	0x080002ed
 80014d0:	080003a1 	.word	0x080003a1
 80014d4:	200000ab 	.word	0x200000ab

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b090      	sub	sp, #64	; 0x40
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 f824 	bl	8005534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80014fa:	230a      	movs	r3, #10
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fe:	2301      	movs	r3, #1
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001502:	2310      	movs	r3, #16
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001506:	2301      	movs	r3, #1
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150a:	2302      	movs	r3, #2
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800150e:	2300      	movs	r3, #0
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001512:	2300      	movs	r3, #0
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	f107 0318 	add.w	r3, r7, #24
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fff4 	bl	8004508 <HAL_RCC_OscConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8001526:	f000 f94b 	bl	80017c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152a:	230f      	movs	r3, #15
 800152c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	2302      	movs	r3, #2
 8001530:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f003 fa60 	bl	8004a08 <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800154e:	f000 f937 	bl	80017c0 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3740      	adds	r7, #64	; 0x40
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_I2C1_Init+0x50>)
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <MX_I2C1_Init+0x54>)
 8001564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_I2C1_Init+0x50>)
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x58>)
 800156a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_I2C1_Init+0x50>)
 800157a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <MX_I2C1_Init+0x50>)
 800159a:	f000 fed9 	bl	8002350 <HAL_I2C_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a4:	f000 f90c 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001ac 	.word	0x200001ac
 80015b0:	40005400 	.word	0x40005400
 80015b4:	000186a0 	.word	0x000186a0

080015b8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_IWDG_Init+0x2c>)
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <MX_IWDG_Init+0x30>)
 80015c0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_IWDG_Init+0x2c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_IWDG_Init+0x2c>)
 80015ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015ce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_IWDG_Init+0x2c>)
 80015d2:	f002 ff45 	bl	8004460 <HAL_IWDG_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80015dc:	f000 f8f0 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000200 	.word	0x20000200
 80015e8:	40003000 	.word	0x40003000

080015ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_TIM2_Init+0x94>)
 800160a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_TIM2_Init+0x94>)
 8001612:	2209      	movs	r2, #9
 8001614:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_TIM2_Init+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_TIM2_Init+0x94>)
 800161e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001622:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_TIM2_Init+0x94>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_TIM2_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <MX_TIM2_Init+0x94>)
 8001632:	f003 fb63 	bl	8004cfc <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800163c:	f000 f8c0 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_TIM2_Init+0x94>)
 800164e:	f003 fce7 	bl	8005020 <HAL_TIM_ConfigClockSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001658:	f000 f8b2 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_TIM2_Init+0x94>)
 800166a:	f003 fec9 	bl	8005400 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001674:	f000 f8a4 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000020c 	.word	0x2000020c

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001698:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <MX_GPIO_Init+0x12c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a44      	ldr	r2, [pc, #272]	; (80017b0 <MX_GPIO_Init+0x12c>)
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a3e      	ldr	r2, [pc, #248]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a38      	ldr	r2, [pc, #224]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <MX_GPIO_Init+0x12c>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_SIDE0_Pin|LED_SIDE1_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7148 	mov.w	r1, #800	; 0x320
 80016fe:	482d      	ldr	r0, [pc, #180]	; (80017b4 <MX_GPIO_Init+0x130>)
 8001700:	f000 fdf5 	bl	80022ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_MAIN1_Pin|LED_MAIN0_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800170a:	482b      	ldr	r0, [pc, #172]	; (80017b8 <MX_GPIO_Init+0x134>)
 800170c:	f000 fdef 	bl	80022ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001716:	4829      	ldr	r0, [pc, #164]	; (80017bc <MX_GPIO_Init+0x138>)
 8001718:	f000 fde9 	bl	80022ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	4822      	ldr	r0, [pc, #136]	; (80017bc <MX_GPIO_Init+0x138>)
 8001732:	f000 fc41 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8001736:	2303      	movs	r3, #3
 8001738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4619      	mov	r1, r3
 8001748:	481a      	ldr	r0, [pc, #104]	; (80017b4 <MX_GPIO_Init+0x130>)
 800174a:	f000 fc35 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_SIDE0_Pin LED_SIDE1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_SIDE0_Pin|LED_SIDE1_Pin;
 800174e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	4813      	ldr	r0, [pc, #76]	; (80017b4 <MX_GPIO_Init+0x130>)
 8001768:	f000 fc26 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MAIN1_Pin LED_MAIN0_Pin */
  GPIO_InitStruct.Pin = LED_MAIN1_Pin|LED_MAIN0_Pin;
 800176c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2302      	movs	r3, #2
 800177c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_GPIO_Init+0x134>)
 8001786:	f000 fc17 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800178a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2302      	movs	r3, #2
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_GPIO_Init+0x138>)
 80017a4:	f000 fc08 	bl	8001fb8 <HAL_GPIO_Init>

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010800 	.word	0x40010800
 80017b8:	40010c00 	.word	0x40010c00
 80017bc:	40011000 	.word	0x40011000

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <Error_Handler+0x8>
	...

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_MspInit+0x5c>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_MspInit+0x5c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_MspInit+0x5c>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_MspInit+0x5c>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <HAL_MspInit+0x5c>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	61d3      	str	r3, [r2, #28]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_MspInit+0x5c>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_MspInit+0x60>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_MspInit+0x60>)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000
 800182c:	40010000 	.word	0x40010000

08001830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <HAL_I2C_MspInit+0xa0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d13a      	bne.n	80018c6 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_I2C_MspInit+0xa4>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_I2C_MspInit+0xa4>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_I2C_MspInit+0xa4>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001868:	f44f 7340 	mov.w	r3, #768	; 0x300
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186e:	2312      	movs	r3, #18
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4816      	ldr	r0, [pc, #88]	; (80018d8 <HAL_I2C_MspInit+0xa8>)
 800187e:	f000 fb9b 	bl	8001fb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_I2C_MspInit+0xac>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
 8001898:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_I2C_MspInit+0xac>)
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_I2C_MspInit+0xa4>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_I2C_MspInit+0xa4>)
 80018a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_I2C_MspInit+0xa4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	201f      	movs	r0, #31
 80018bc:	f000 fabf 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018c0:	201f      	movs	r0, #31
 80018c2:	f000 fad8 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005400 	.word	0x40005400
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40010000 	.word	0x40010000

080018e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f0:	d113      	bne.n	800191a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_TIM_Base_MspInit+0x44>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_TIM_Base_MspInit+0x44>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_TIM_Base_MspInit+0x44>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	201c      	movs	r0, #28
 8001910:	f000 fa95 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001914:	201c      	movs	r0, #28
 8001916:	f000 faae 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000

08001928 <__NVIC_SystemReset>:
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800192c:	f3bf 8f4f 	dsb	sy
}
 8001930:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <__NVIC_SystemReset+0x24>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800193a:	4904      	ldr	r1, [pc, #16]	; (800194c <__NVIC_SystemReset+0x24>)
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_SystemReset+0x28>)
 800193e:	4313      	orrs	r3, r2
 8001940:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001942:	f3bf 8f4f 	dsb	sy
}
 8001946:	bf00      	nop
    __NOP();
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <__NVIC_SystemReset+0x20>
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	05fa0004 	.word	0x05fa0004

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <NMI_Handler+0x4>
	...

0800195c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  char bufff[17];
	  lcd_clear_display();
 8001962:	f7fe fca0 	bl	80002a6 <lcd_clear_display>
	  sprintf(bufff, " <HARD FAULT>");
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	4906      	ldr	r1, [pc, #24]	; (8001984 <HardFault_Handler+0x28>)
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fdea 	bl	8005544 <siprintf>
	  lcd_goto_XY(0, 0);
 8001970:	2100      	movs	r1, #0
 8001972:	2000      	movs	r0, #0
 8001974:	f7fe fc9e 	bl	80002b4 <lcd_goto_XY>
	  lcd_send_string(bufff);
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fc7e 	bl	800027c <lcd_send_string>
	NVIC_SystemReset();
 8001980:	f7ff ffd2 	bl	8001928 <__NVIC_SystemReset>
 8001984:	08005ebc 	.word	0x08005ebc

08001988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <MemManage_Handler+0x4>

0800198e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <UsageFault_Handler+0x4>

0800199a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c2:	f000 f925 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <TIM2_IRQHandler+0x10>)
 80019d2:	f003 fa35 	bl	8004e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000020c 	.word	0x2000020c

080019e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <I2C1_EV_IRQHandler+0x10>)
 80019e6:	f000 ff09 	bl	80027fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200001ac 	.word	0x200001ac

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f003 fd5c 	bl	80054e0 <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20005000 	.word	0x20005000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	200000cc 	.word	0x200000cc
 8001a5c:	20000268 	.word	0x20000268

08001a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <fsm_traffic>:
#include "traffic_light.h"

traffic_mode	t_mode_main = RED,
				t_mode_side = YELLOW;

void fsm_traffic(traffic_mode* mode, traffic_way* Tway){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	switch(*mode){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d030      	beq.n	8001ae0 <fsm_traffic+0x74>
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	dc43      	bgt.n	8001b0a <fsm_traffic+0x9e>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <fsm_traffic+0x20>
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d015      	beq.n	8001ab6 <fsm_traffic+0x4a>
 8001a8a:	e03e      	b.n	8001b0a <fsm_traffic+0x9e>
	case RED:
		if(Tway->count_down == 0){
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d148      	bne.n	8001b26 <fsm_traffic+0xba>
			*mode = GREEN;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
			LedTraffic(Tway->way, LED_GREEN);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2103      	movs	r1, #3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fa8b 	bl	8000fbc <LedTraffic>
			Tway->count_down = Tway->green;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	791a      	ldrb	r2, [r3, #4]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	705a      	strb	r2, [r3, #1]
			updateLCD(traffic);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff fa66 	bl	8000f80 <updateLCD>
		}
		break;
 8001ab4:	e037      	b.n	8001b26 <fsm_traffic+0xba>
	case YELLOW:
		if(Tway->count_down == 0){
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	785b      	ldrb	r3, [r3, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d135      	bne.n	8001b2a <fsm_traffic+0xbe>
			*mode = RED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
			LedTraffic(Tway->way, LED_RED);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fa76 	bl	8000fbc <LedTraffic>
			Tway->count_down = Tway->red;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	789a      	ldrb	r2, [r3, #2]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	705a      	strb	r2, [r3, #1]
			updateLCD(traffic);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fa51 	bl	8000f80 <updateLCD>
		}
		break;
 8001ade:	e024      	b.n	8001b2a <fsm_traffic+0xbe>
	case GREEN:
		if(Tway->count_down == 0){
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d122      	bne.n	8001b2e <fsm_traffic+0xc2>
			*mode = YELLOW;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
			LedTraffic(Tway->way, LED_YELLOW);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2102      	movs	r1, #2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fa61 	bl	8000fbc <LedTraffic>
			Tway->count_down = Tway->yellow;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	78da      	ldrb	r2, [r3, #3]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	705a      	strb	r2, [r3, #1]
			updateLCD(traffic);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff fa3c 	bl	8000f80 <updateLCD>
		}
		break;
 8001b08:	e011      	b.n	8001b2e <fsm_traffic+0xc2>
	default:
		*mode = RED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
		LedTraffic(Tway->way, LED_RED);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fa50 	bl	8000fbc <LedTraffic>
		Tway->count_down = Tway->red;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	789a      	ldrb	r2, [r3, #2]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	705a      	strb	r2, [r3, #1]
		break;
 8001b24:	e004      	b.n	8001b30 <fsm_traffic+0xc4>
		break;
 8001b26:	bf00      	nop
 8001b28:	e002      	b.n	8001b30 <fsm_traffic+0xc4>
		break;
 8001b2a:	bf00      	nop
 8001b2c:	e000      	b.n	8001b30 <fsm_traffic+0xc4>
		break;
 8001b2e:	bf00      	nop
	}
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b38:	f7ff ff92 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b3e:	490c      	ldr	r1, [pc, #48]	; (8001b70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b40:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b54:	4c09      	ldr	r4, [pc, #36]	; (8001b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b62:	f003 fcc3 	bl	80054ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b66:	f7ff fc65 	bl	8001434 <main>
  bx lr
 8001b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001b74:	08005f34 	.word	0x08005f34
  ldr r2, =_sbss
 8001b78:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001b7c:	20000268 	.word	0x20000268

08001b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC1_2_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x28>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x28>)
 8001b8e:	f043 0310 	orr.w	r3, r3, #16
 8001b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f947 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fe14 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40022000 	.word	0x40022000

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f95f 	bl	8001e92 <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f927 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000018 	.word	0x20000018
 8001c08:	20000024 	.word	0x20000024
 8001c0c:	20000020 	.word	0x20000020

08001c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_IncTick+0x1c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_IncTick+0x20>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <HAL_IncTick+0x20>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000024 	.word	0x20000024
 8001c30:	20000254 	.word	0x20000254

08001c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <HAL_GetTick+0x10>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	20000254 	.word	0x20000254

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff fff0 	bl	8001c34 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_Delay+0x44>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffe0 	bl	8001c34 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d8f7      	bhi.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000024 	.word	0x20000024

08001c90 <__NVIC_SetPriorityGrouping>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc2:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_GetPriorityGrouping>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	f003 0307 	and.w	r3, r3, #7
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_EnableIRQ>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db0b      	blt.n	8001d1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4906      	ldr	r1, [pc, #24]	; (8001d28 <__NVIC_EnableIRQ+0x34>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	2001      	movs	r0, #1
 8001d16:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff90 	bl	8001d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff2d 	bl	8001c90 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff42 	bl	8001cd8 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff90 	bl	8001d80 <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5f 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff35 	bl	8001cf4 <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa2 	bl	8001de4 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d005      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	e051      	b.n	8001f74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 020e 	bic.w	r2, r2, #14
 8001ede:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <HAL_DMA_Abort_IT+0xd4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d029      	beq.n	8001f4e <HAL_DMA_Abort_IT+0xa2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <HAL_DMA_Abort_IT+0xd8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x9e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_DMA_Abort_IT+0xdc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x98>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_DMA_Abort_IT+0xe0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d012      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x92>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_DMA_Abort_IT+0xe4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00a      	beq.n	8001f38 <HAL_DMA_Abort_IT+0x8c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_DMA_Abort_IT+0xe8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d102      	bne.n	8001f32 <HAL_DMA_Abort_IT+0x86>
 8001f2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f30:	e00e      	b.n	8001f50 <HAL_DMA_Abort_IT+0xa4>
 8001f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f36:	e00b      	b.n	8001f50 <HAL_DMA_Abort_IT+0xa4>
 8001f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f3c:	e008      	b.n	8001f50 <HAL_DMA_Abort_IT+0xa4>
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	e005      	b.n	8001f50 <HAL_DMA_Abort_IT+0xa4>
 8001f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f48:	e002      	b.n	8001f50 <HAL_DMA_Abort_IT+0xa4>
 8001f4a:	2310      	movs	r3, #16
 8001f4c:	e000      	b.n	8001f50 <HAL_DMA_Abort_IT+0xa4>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_DMA_Abort_IT+0xec>)
 8001f52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
    } 
  }
  return status;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40020008 	.word	0x40020008
 8001f84:	4002001c 	.word	0x4002001c
 8001f88:	40020030 	.word	0x40020030
 8001f8c:	40020044 	.word	0x40020044
 8001f90:	40020058 	.word	0x40020058
 8001f94:	4002006c 	.word	0x4002006c
 8001f98:	40020000 	.word	0x40020000

08001f9c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001faa:	b2db      	uxtb	r3, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b08b      	sub	sp, #44	; 0x2c
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fca:	e169      	b.n	80022a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 8158 	bne.w	800229a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4a9a      	ldr	r2, [pc, #616]	; (8002258 <HAL_GPIO_Init+0x2a0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d05e      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8001ff4:	4a98      	ldr	r2, [pc, #608]	; (8002258 <HAL_GPIO_Init+0x2a0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d875      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8001ffa:	4a98      	ldr	r2, [pc, #608]	; (800225c <HAL_GPIO_Init+0x2a4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d058      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8002000:	4a96      	ldr	r2, [pc, #600]	; (800225c <HAL_GPIO_Init+0x2a4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d86f      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8002006:	4a96      	ldr	r2, [pc, #600]	; (8002260 <HAL_GPIO_Init+0x2a8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d052      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 800200c:	4a94      	ldr	r2, [pc, #592]	; (8002260 <HAL_GPIO_Init+0x2a8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d869      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8002012:	4a94      	ldr	r2, [pc, #592]	; (8002264 <HAL_GPIO_Init+0x2ac>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d04c      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8002018:	4a92      	ldr	r2, [pc, #584]	; (8002264 <HAL_GPIO_Init+0x2ac>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d863      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 800201e:	4a92      	ldr	r2, [pc, #584]	; (8002268 <HAL_GPIO_Init+0x2b0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d046      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8002024:	4a90      	ldr	r2, [pc, #576]	; (8002268 <HAL_GPIO_Init+0x2b0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d85d      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 800202a:	2b12      	cmp	r3, #18
 800202c:	d82a      	bhi.n	8002084 <HAL_GPIO_Init+0xcc>
 800202e:	2b12      	cmp	r3, #18
 8002030:	d859      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8002032:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <HAL_GPIO_Init+0x80>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	080020b3 	.word	0x080020b3
 800203c:	0800208d 	.word	0x0800208d
 8002040:	0800209f 	.word	0x0800209f
 8002044:	080020e1 	.word	0x080020e1
 8002048:	080020e7 	.word	0x080020e7
 800204c:	080020e7 	.word	0x080020e7
 8002050:	080020e7 	.word	0x080020e7
 8002054:	080020e7 	.word	0x080020e7
 8002058:	080020e7 	.word	0x080020e7
 800205c:	080020e7 	.word	0x080020e7
 8002060:	080020e7 	.word	0x080020e7
 8002064:	080020e7 	.word	0x080020e7
 8002068:	080020e7 	.word	0x080020e7
 800206c:	080020e7 	.word	0x080020e7
 8002070:	080020e7 	.word	0x080020e7
 8002074:	080020e7 	.word	0x080020e7
 8002078:	080020e7 	.word	0x080020e7
 800207c:	08002095 	.word	0x08002095
 8002080:	080020a9 	.word	0x080020a9
 8002084:	4a79      	ldr	r2, [pc, #484]	; (800226c <HAL_GPIO_Init+0x2b4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800208a:	e02c      	b.n	80020e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e029      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	3304      	adds	r3, #4
 800209a:	623b      	str	r3, [r7, #32]
          break;
 800209c:	e024      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	3308      	adds	r3, #8
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e01f      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	330c      	adds	r3, #12
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e01a      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ba:	2304      	movs	r3, #4
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e013      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c8:	2308      	movs	r3, #8
 80020ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	611a      	str	r2, [r3, #16]
          break;
 80020d2:	e009      	b.n	80020e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d4:	2308      	movs	r3, #8
 80020d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	615a      	str	r2, [r3, #20]
          break;
 80020de:	e003      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
          break;
 80020e4:	e000      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          break;
 80020e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2bff      	cmp	r3, #255	; 0xff
 80020ec:	d801      	bhi.n	80020f2 <HAL_GPIO_Init+0x13a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	e001      	b.n	80020f6 <HAL_GPIO_Init+0x13e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3304      	adds	r3, #4
 80020f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2bff      	cmp	r3, #255	; 0xff
 80020fc:	d802      	bhi.n	8002104 <HAL_GPIO_Init+0x14c>
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	e002      	b.n	800210a <HAL_GPIO_Init+0x152>
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	3b08      	subs	r3, #8
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	210f      	movs	r1, #15
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	401a      	ands	r2, r3
 800211c:	6a39      	ldr	r1, [r7, #32]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	431a      	orrs	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80b1 	beq.w	800229a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002138:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <HAL_GPIO_Init+0x2b8>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a4c      	ldr	r2, [pc, #304]	; (8002270 <HAL_GPIO_Init+0x2b8>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <HAL_GPIO_Init+0x2b8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002150:	4a48      	ldr	r2, [pc, #288]	; (8002274 <HAL_GPIO_Init+0x2bc>)
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	220f      	movs	r2, #15
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a40      	ldr	r2, [pc, #256]	; (8002278 <HAL_GPIO_Init+0x2c0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d013      	beq.n	80021a4 <HAL_GPIO_Init+0x1ec>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3f      	ldr	r2, [pc, #252]	; (800227c <HAL_GPIO_Init+0x2c4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00d      	beq.n	80021a0 <HAL_GPIO_Init+0x1e8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3e      	ldr	r2, [pc, #248]	; (8002280 <HAL_GPIO_Init+0x2c8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <HAL_GPIO_Init+0x1e4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a3d      	ldr	r2, [pc, #244]	; (8002284 <HAL_GPIO_Init+0x2cc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_GPIO_Init+0x1e0>
 8002194:	2303      	movs	r3, #3
 8002196:	e006      	b.n	80021a6 <HAL_GPIO_Init+0x1ee>
 8002198:	2304      	movs	r3, #4
 800219a:	e004      	b.n	80021a6 <HAL_GPIO_Init+0x1ee>
 800219c:	2302      	movs	r3, #2
 800219e:	e002      	b.n	80021a6 <HAL_GPIO_Init+0x1ee>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_GPIO_Init+0x1ee>
 80021a4:	2300      	movs	r3, #0
 80021a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a8:	f002 0203 	and.w	r2, r2, #3
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	4093      	lsls	r3, r2
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021b6:	492f      	ldr	r1, [pc, #188]	; (8002274 <HAL_GPIO_Init+0x2bc>)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021d0:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	492c      	ldr	r1, [pc, #176]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4928      	ldr	r1, [pc, #160]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	4922      	ldr	r1, [pc, #136]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	43db      	mvns	r3, r3
 800220e:	491e      	ldr	r1, [pc, #120]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 8002210:	4013      	ands	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4918      	ldr	r1, [pc, #96]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	43db      	mvns	r3, r3
 8002236:	4914      	ldr	r1, [pc, #80]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 8002238:	4013      	ands	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d021      	beq.n	800228c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	490e      	ldr	r1, [pc, #56]	; (8002288 <HAL_GPIO_Init+0x2d0>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e021      	b.n	800229a <HAL_GPIO_Init+0x2e2>
 8002256:	bf00      	nop
 8002258:	10320000 	.word	0x10320000
 800225c:	10310000 	.word	0x10310000
 8002260:	10220000 	.word	0x10220000
 8002264:	10210000 	.word	0x10210000
 8002268:	10120000 	.word	0x10120000
 800226c:	10110000 	.word	0x10110000
 8002270:	40021000 	.word	0x40021000
 8002274:	40010000 	.word	0x40010000
 8002278:	40010800 	.word	0x40010800
 800227c:	40010c00 	.word	0x40010c00
 8002280:	40011000 	.word	0x40011000
 8002284:	40011400 	.word	0x40011400
 8002288:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_GPIO_Init+0x304>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	43db      	mvns	r3, r3
 8002294:	4909      	ldr	r1, [pc, #36]	; (80022bc <HAL_GPIO_Init+0x304>)
 8002296:	4013      	ands	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	3301      	adds	r3, #1
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f47f ae8e 	bne.w	8001fcc <HAL_GPIO_Init+0x14>
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	372c      	adds	r7, #44	; 0x2c
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	40010400 	.word	0x40010400

080022c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e001      	b.n	80022e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	807b      	strh	r3, [r7, #2]
 80022fa:	4613      	mov	r3, r2
 80022fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fe:	787b      	ldrb	r3, [r7, #1]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002304:	887a      	ldrh	r2, [r7, #2]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800230a:	e003      	b.n	8002314 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800230c:	887b      	ldrh	r3, [r7, #2]
 800230e:	041a      	lsls	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	611a      	str	r2, [r3, #16]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	041a      	lsls	r2, r3, #16
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43d9      	mvns	r1, r3
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	400b      	ands	r3, r1
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e12b      	b.n	80025ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fa5a 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2224      	movs	r2, #36	; 0x24
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023b4:	f002 fc70 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 80023b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4a81      	ldr	r2, [pc, #516]	; (80025c4 <HAL_I2C_Init+0x274>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d807      	bhi.n	80023d4 <HAL_I2C_Init+0x84>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a80      	ldr	r2, [pc, #512]	; (80025c8 <HAL_I2C_Init+0x278>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	bf94      	ite	ls
 80023cc:	2301      	movls	r3, #1
 80023ce:	2300      	movhi	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e006      	b.n	80023e2 <HAL_I2C_Init+0x92>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a7d      	ldr	r2, [pc, #500]	; (80025cc <HAL_I2C_Init+0x27c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	bf94      	ite	ls
 80023dc:	2301      	movls	r3, #1
 80023de:	2300      	movhi	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0e7      	b.n	80025ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4a78      	ldr	r2, [pc, #480]	; (80025d0 <HAL_I2C_Init+0x280>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0c9b      	lsrs	r3, r3, #18
 80023f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	430a      	orrs	r2, r1
 8002408:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a6a      	ldr	r2, [pc, #424]	; (80025c4 <HAL_I2C_Init+0x274>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d802      	bhi.n	8002424 <HAL_I2C_Init+0xd4>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3301      	adds	r3, #1
 8002422:	e009      	b.n	8002438 <HAL_I2C_Init+0xe8>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	4a69      	ldr	r2, [pc, #420]	; (80025d4 <HAL_I2C_Init+0x284>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	3301      	adds	r3, #1
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	430b      	orrs	r3, r1
 800243e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800244a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	495c      	ldr	r1, [pc, #368]	; (80025c4 <HAL_I2C_Init+0x274>)
 8002454:	428b      	cmp	r3, r1
 8002456:	d819      	bhi.n	800248c <HAL_I2C_Init+0x13c>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1e59      	subs	r1, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fbb1 f3f3 	udiv	r3, r1, r3
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	f640 73fc 	movw	r3, #4092	; 0xffc
 800246c:	400b      	ands	r3, r1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_I2C_Init+0x138>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1e59      	subs	r1, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002480:	3301      	adds	r3, #1
 8002482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002486:	e051      	b.n	800252c <HAL_I2C_Init+0x1dc>
 8002488:	2304      	movs	r3, #4
 800248a:	e04f      	b.n	800252c <HAL_I2C_Init+0x1dc>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HAL_I2C_Init+0x168>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e58      	subs	r0, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e012      	b.n	80024de <HAL_I2C_Init+0x18e>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e58      	subs	r0, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	0099      	lsls	r1, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x196>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e022      	b.n	800252c <HAL_I2C_Init+0x1dc>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10e      	bne.n	800250c <HAL_I2C_Init+0x1bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1e58      	subs	r0, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	440b      	add	r3, r1
 80024fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250a:	e00f      	b.n	800252c <HAL_I2C_Init+0x1dc>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e58      	subs	r0, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	0099      	lsls	r1, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	6809      	ldr	r1, [r1, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800255a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6911      	ldr	r1, [r2, #16]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68d2      	ldr	r2, [r2, #12]
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	430b      	orrs	r3, r1
 800256e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	000186a0 	.word	0x000186a0
 80025c8:	001e847f 	.word	0x001e847f
 80025cc:	003d08ff 	.word	0x003d08ff
 80025d0:	431bde83 	.word	0x431bde83
 80025d4:	10624dd3 	.word	0x10624dd3

080025d8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d103      	bne.n	80025f6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  }
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
 8002610:	4613      	mov	r3, r2
 8002612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff fb0e 	bl	8001c34 <HAL_GetTick>
 8002618:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b20      	cmp	r3, #32
 8002624:	f040 80e0 	bne.w	80027e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2319      	movs	r3, #25
 800262e:	2201      	movs	r2, #1
 8002630:	4970      	ldr	r1, [pc, #448]	; (80027f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f001 fcf0 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	e0d3      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2C_Master_Transmit+0x50>
 800264c:	2302      	movs	r3, #2
 800264e:	e0cc      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d007      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2221      	movs	r2, #33	; 0x21
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2210      	movs	r2, #16
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f001 fb80 	bl	8003dc4 <I2C_MasterRequestWrite>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e08d      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026e4:	e066      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f001 fdae 	bl	800424c <I2C_WaitOnTXEFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00d      	beq.n	8002712 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d107      	bne.n	800270e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b04      	cmp	r3, #4
 800274e:	d11b      	bne.n	8002788 <HAL_I2C_Master_Transmit+0x188>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d017      	beq.n	8002788 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	6a39      	ldr	r1, [r7, #32]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f001 fda5 	bl	80042dc <I2C_WaitOnBTFFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	2b04      	cmp	r3, #4
 800279e:	d107      	bne.n	80027b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e01a      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d194      	bne.n	80026e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000

080027fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800281c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d003      	beq.n	8002834 <HAL_I2C_EV_IRQHandler+0x38>
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	f040 80c1 	bne.w	80029b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_I2C_EV_IRQHandler+0x6e>
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002854:	d003      	beq.n	800285e <HAL_I2C_EV_IRQHandler+0x62>
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800285c:	d101      	bne.n	8002862 <HAL_I2C_EV_IRQHandler+0x66>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_I2C_EV_IRQHandler+0x68>
 8002862:	2300      	movs	r3, #0
 8002864:	2b01      	cmp	r3, #1
 8002866:	f000 8132 	beq.w	8002ace <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00c      	beq.n	800288e <HAL_I2C_EV_IRQHandler+0x92>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f001 fdd3 	bl	800442c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fcea 	bl	8003260 <I2C_Master_SB>
 800288c:	e092      	b.n	80029b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08db      	lsrs	r3, r3, #3
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_I2C_EV_IRQHandler+0xb2>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	0a5b      	lsrs	r3, r3, #9
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd5f 	bl	800336a <I2C_Master_ADD10>
 80028ac:	e082      	b.n	80029b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_I2C_EV_IRQHandler+0xd2>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	0a5b      	lsrs	r3, r3, #9
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fd78 	bl	80033bc <I2C_Master_ADDR>
 80028cc:	e072      	b.n	80029b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03b      	beq.n	8002952 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e8:	f000 80f3 	beq.w	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	09db      	lsrs	r3, r3, #7
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00f      	beq.n	8002918 <HAL_I2C_EV_IRQHandler+0x11c>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	0a9b      	lsrs	r3, r3, #10
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_I2C_EV_IRQHandler+0x11c>
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d103      	bne.n	8002918 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f942 	bl	8002b9a <I2C_MasterTransmit_TXE>
 8002916:	e04d      	b.n	80029b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80d6 	beq.w	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	0a5b      	lsrs	r3, r3, #9
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80cf 	beq.w	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002934:	7bbb      	ldrb	r3, [r7, #14]
 8002936:	2b21      	cmp	r3, #33	; 0x21
 8002938:	d103      	bne.n	8002942 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f9c9 	bl	8002cd2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002940:	e0c7      	b.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	f040 80c4 	bne.w	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fa37 	bl	8002dbe <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002950:	e0bf      	b.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002960:	f000 80b7 	beq.w	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00f      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x194>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	0a9b      	lsrs	r3, r3, #10
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d009      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x194>
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fab0 	bl	8002eee <I2C_MasterReceive_RXNE>
 800298e:	e011      	b.n	80029b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 809a 	beq.w	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	0a5b      	lsrs	r3, r3, #9
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8093 	beq.w	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fb66 	bl	800307e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b2:	e08e      	b.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80029b4:	e08d      	b.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	e007      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d012      	beq.n	8002a0a <HAL_I2C_EV_IRQHandler+0x20e>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	0a5b      	lsrs	r3, r3, #9
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00c      	beq.n	8002a0a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a00:	69b9      	ldr	r1, [r7, #24]
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 ff31 	bl	800386a <I2C_Slave_ADDR>
 8002a08:	e066      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_I2C_EV_IRQHandler+0x22e>
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	0a5b      	lsrs	r3, r3, #9
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 ff6c 	bl	8003900 <I2C_Slave_STOPF>
 8002a28:	e056      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a2a:	7bbb      	ldrb	r3, [r7, #14]
 8002a2c:	2b21      	cmp	r3, #33	; 0x21
 8002a2e:	d002      	beq.n	8002a36 <HAL_I2C_EV_IRQHandler+0x23a>
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	2b29      	cmp	r3, #41	; 0x29
 8002a34:	d125      	bne.n	8002a82 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	09db      	lsrs	r3, r3, #7
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00f      	beq.n	8002a62 <HAL_I2C_EV_IRQHandler+0x266>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	0a9b      	lsrs	r3, r3, #10
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_I2C_EV_IRQHandler+0x266>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d103      	bne.n	8002a62 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fe49 	bl	80036f2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a60:	e039      	b.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d033      	beq.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x2da>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	0a5b      	lsrs	r3, r3, #9
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d02d      	beq.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fe76 	bl	800376c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a80:	e029      	b.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	099b      	lsrs	r3, r3, #6
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00f      	beq.n	8002aae <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	0a9b      	lsrs	r3, r3, #10
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fe80 	bl	80037ac <I2C_SlaveReceive_RXNE>
 8002aac:	e014      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	0a5b      	lsrs	r3, r3, #9
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 feae 	bl	8003828 <I2C_SlaveReceive_BTF>
 8002acc:	e004      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ace:	bf00      	nop
 8002ad0:	e002      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ad6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
 8002b32:	4613      	mov	r3, r2
 8002b34:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d150      	bne.n	8002c62 <I2C_MasterTransmit_TXE+0xc8>
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b21      	cmp	r3, #33	; 0x21
 8002bc4:	d14d      	bne.n	8002c62 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d01d      	beq.n	8002c08 <I2C_MasterTransmit_TXE+0x6e>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d01a      	beq.n	8002c08 <I2C_MasterTransmit_TXE+0x6e>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bd8:	d016      	beq.n	8002c08 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002be8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2211      	movs	r2, #17
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff6c 	bl	8002ade <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c06:	e060      	b.n	8002cca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c16:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c26:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d107      	bne.n	8002c52 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ff81 	bl	8002b52 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c50:	e03b      	b.n	8002cca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ff3f 	bl	8002ade <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c60:	e033      	b.n	8002cca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b21      	cmp	r3, #33	; 0x21
 8002c66:	d005      	beq.n	8002c74 <I2C_MasterTransmit_TXE+0xda>
 8002c68:	7bbb      	ldrb	r3, [r7, #14]
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d12d      	bne.n	8002cca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b22      	cmp	r3, #34	; 0x22
 8002c72:	d12a      	bne.n	8002cca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d108      	bne.n	8002c90 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002c8e:	e01c      	b.n	8002cca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d103      	bne.n	8002ca4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f88e 	bl	8002dbe <I2C_MemoryTransmit_TXE_BTF>
}
 8002ca2:	e012      	b.n	8002cca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cc8:	e7ff      	b.n	8002cca <I2C_MasterTransmit_TXE+0x130>
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b21      	cmp	r3, #33	; 0x21
 8002cea:	d164      	bne.n	8002db6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d012      	beq.n	8002d1c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002d1a:	e04c      	b.n	8002db6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d01d      	beq.n	8002d5e <I2C_MasterTransmit_BTF+0x8c>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d01a      	beq.n	8002d5e <I2C_MasterTransmit_BTF+0x8c>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d2e:	d016      	beq.n	8002d5e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d3e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2211      	movs	r2, #17
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff fec1 	bl	8002ade <HAL_I2C_MasterTxCpltCallback>
}
 8002d5c:	e02b      	b.n	8002db6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d6c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d107      	bne.n	8002da8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff fed6 	bl	8002b52 <HAL_I2C_MemTxCpltCallback>
}
 8002da6:	e006      	b.n	8002db6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff fe94 	bl	8002ade <HAL_I2C_MasterTxCpltCallback>
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11d      	bne.n	8002e12 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d10b      	bne.n	8002df6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	1c9a      	adds	r2, r3, #2
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002df4:	e077      	b.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	121b      	asrs	r3, r3, #8
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e10:	e069      	b.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10b      	bne.n	8002e32 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e30:	e059      	b.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d152      	bne.n	8002ee0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b22      	cmp	r3, #34	; 0x22
 8002e3e:	d10d      	bne.n	8002e5c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e4e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e5a:	e044      	b.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d015      	beq.n	8002e92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b21      	cmp	r3, #33	; 0x21
 8002e6a:	d112      	bne.n	8002e92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e90:	e029      	b.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d124      	bne.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b21      	cmp	r3, #33	; 0x21
 8002ea0:	d121      	bne.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eb0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fe3a 	bl	8002b52 <HAL_I2C_MemTxCpltCallback>
}
 8002ede:	e002      	b.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff fb79 	bl	80025d8 <I2C_Flush_DR>
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b22      	cmp	r3, #34	; 0x22
 8002f00:	f040 80b9 	bne.w	8003076 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d921      	bls.n	8002f5c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	f040 8096 	bne.w	8003076 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002f5a:	e08c      	b.n	8003076 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d07f      	beq.n	8003064 <I2C_MasterReceive_RXNE+0x176>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d002      	beq.n	8002f70 <I2C_MasterReceive_RXNE+0x82>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d179      	bne.n	8003064 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f001 f9fb 	bl	800436c <I2C_WaitOnSTOPRequestThroughIT>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d14c      	bne.n	8003016 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d10a      	bne.n	8002fec <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff fdbd 	bl	8002b64 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002fea:	e044      	b.n	8003076 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d002      	beq.n	8003000 <I2C_MasterReceive_RXNE+0x112>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d103      	bne.n	8003008 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
 8003006:	e002      	b.n	800300e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2212      	movs	r2, #18
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff fd6e 	bl	8002af0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003014:	e02f      	b.n	8003076 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003024:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fd8a 	bl	8002b76 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003062:	e008      	b.n	8003076 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003072:	605a      	str	r2, [r3, #4]
}
 8003074:	e7ff      	b.n	8003076 <I2C_MasterReceive_RXNE+0x188>
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b04      	cmp	r3, #4
 8003094:	d11b      	bne.n	80030ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80030cc:	e0c4      	b.n	8003258 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d129      	bne.n	800312c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d00a      	beq.n	8003104 <I2C_MasterReceive_BTF+0x86>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d007      	beq.n	8003104 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003102:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800312a:	e095      	b.n	8003258 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d17d      	bne.n	8003232 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d002      	beq.n	8003142 <I2C_MasterReceive_BTF+0xc4>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b10      	cmp	r3, #16
 8003140:	d108      	bne.n	8003154 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e016      	b.n	8003182 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b04      	cmp	r3, #4
 8003158:	d002      	beq.n	8003160 <I2C_MasterReceive_BTF+0xe2>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d108      	bne.n	8003172 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e007      	b.n	8003182 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003180:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d10a      	bne.n	8003208 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff fcaf 	bl	8002b64 <HAL_I2C_MemRxCpltCallback>
}
 8003206:	e027      	b.n	8003258 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b08      	cmp	r3, #8
 8003214:	d002      	beq.n	800321c <I2C_MasterReceive_BTF+0x19e>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b20      	cmp	r3, #32
 800321a:	d103      	bne.n	8003224 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
 8003222:	e002      	b.n	800322a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2212      	movs	r2, #18
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fc60 	bl	8002af0 <HAL_I2C_MasterRxCpltCallback>
}
 8003230:	e012      	b.n	8003258 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d117      	bne.n	80032a4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800328c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800328e:	e067      	b.n	8003360 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	b2da      	uxtb	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	611a      	str	r2, [r3, #16]
}
 80032a2:	e05d      	b.n	8003360 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ac:	d133      	bne.n	8003316 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b21      	cmp	r3, #33	; 0x21
 80032b8:	d109      	bne.n	80032ce <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032ca:	611a      	str	r2, [r3, #16]
 80032cc:	e008      	b.n	80032e0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <I2C_Master_SB+0x92>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d108      	bne.n	8003304 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d032      	beq.n	8003360 <I2C_Master_SB+0x100>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02d      	beq.n	8003360 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003312:	605a      	str	r2, [r3, #4]
}
 8003314:	e024      	b.n	8003360 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	b29b      	uxth	r3, r3
 8003324:	11db      	asrs	r3, r3, #7
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 0306 	and.w	r3, r3, #6
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f063 030f 	orn	r3, r3, #15
 8003332:	b2da      	uxtb	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]
}
 800333a:	e011      	b.n	8003360 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10d      	bne.n	8003360 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003348:	b29b      	uxth	r3, r3
 800334a:	11db      	asrs	r3, r3, #7
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 0306 	and.w	r3, r3, #6
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f063 030e 	orn	r3, r3, #14
 8003358:	b2da      	uxtb	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	b2da      	uxtb	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <I2C_Master_ADD10+0x26>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d108      	bne.n	80033a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00c      	beq.n	80033b2 <I2C_Master_ADD10+0x48>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b0:	605a      	str	r2, [r3, #4]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b480      	push	{r7}
 80033be:	b091      	sub	sp, #68	; 0x44
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b22      	cmp	r3, #34	; 0x22
 80033e4:	f040 8174 	bne.w	80036d0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10f      	bne.n	8003410 <I2C_Master_ADDR+0x54>
 80033f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d10b      	bne.n	8003410 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f8:	2300      	movs	r3, #0
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	e16b      	b.n	80036e8 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	2b00      	cmp	r3, #0
 8003416:	d11d      	bne.n	8003454 <I2C_Master_ADDR+0x98>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003420:	d118      	bne.n	8003454 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003446:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	651a      	str	r2, [r3, #80]	; 0x50
 8003452:	e149      	b.n	80036e8 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d113      	bne.n	8003486 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e120      	b.n	80036c8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 808a 	bne.w	80035a6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003498:	d137      	bne.n	800350a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b8:	d113      	bne.n	80034e2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	e0f2      	b.n	80036c8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e2:	2300      	movs	r3, #0
 80034e4:	623b      	str	r3, [r7, #32]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	623b      	str	r3, [r7, #32]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e0de      	b.n	80036c8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	2b08      	cmp	r3, #8
 800350e:	d02e      	beq.n	800356e <I2C_Master_ADDR+0x1b2>
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	2b20      	cmp	r3, #32
 8003514:	d02b      	beq.n	800356e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003518:	2b12      	cmp	r3, #18
 800351a:	d102      	bne.n	8003522 <I2C_Master_ADDR+0x166>
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	2b01      	cmp	r3, #1
 8003520:	d125      	bne.n	800356e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	2b04      	cmp	r3, #4
 8003526:	d00e      	beq.n	8003546 <I2C_Master_ADDR+0x18a>
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	2b02      	cmp	r3, #2
 800352c:	d00b      	beq.n	8003546 <I2C_Master_ADDR+0x18a>
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	2b10      	cmp	r3, #16
 8003532:	d008      	beq.n	8003546 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e007      	b.n	8003556 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003554:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	e0ac      	b.n	80036c8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e090      	b.n	80036c8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d158      	bne.n	8003662 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d021      	beq.n	80035fa <I2C_Master_ADDR+0x23e>
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d01e      	beq.n	80035fa <I2C_Master_ADDR+0x23e>
 80035bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d01b      	beq.n	80035fa <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e012      	b.n	8003620 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003608:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362e:	d14b      	bne.n	80036c8 <I2C_Master_ADDR+0x30c>
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003636:	d00b      	beq.n	8003650 <I2C_Master_ADDR+0x294>
 8003638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363a:	2b01      	cmp	r3, #1
 800363c:	d008      	beq.n	8003650 <I2C_Master_ADDR+0x294>
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	2b08      	cmp	r3, #8
 8003642:	d005      	beq.n	8003650 <I2C_Master_ADDR+0x294>
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	2b10      	cmp	r3, #16
 8003648:	d002      	beq.n	8003650 <I2C_Master_ADDR+0x294>
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	2b20      	cmp	r3, #32
 800364e:	d13b      	bne.n	80036c8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	e032      	b.n	80036c8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003670:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003680:	d117      	bne.n	80036b2 <I2C_Master_ADDR+0x2f6>
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003688:	d00b      	beq.n	80036a2 <I2C_Master_ADDR+0x2e6>
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	2b01      	cmp	r3, #1
 800368e:	d008      	beq.n	80036a2 <I2C_Master_ADDR+0x2e6>
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	2b08      	cmp	r3, #8
 8003694:	d005      	beq.n	80036a2 <I2C_Master_ADDR+0x2e6>
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	2b10      	cmp	r3, #16
 800369a:	d002      	beq.n	80036a2 <I2C_Master_ADDR+0x2e6>
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d107      	bne.n	80036b2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80036ce:	e00b      	b.n	80036e8 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d0:	2300      	movs	r3, #0
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
}
 80036e6:	e7ff      	b.n	80036e8 <I2C_Master_ADDR+0x32c>
 80036e8:	bf00      	nop
 80036ea:	3744      	adds	r7, #68	; 0x44
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02b      	beq.n	8003764 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d114      	bne.n	8003764 <I2C_SlaveTransmit_TXE+0x72>
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b29      	cmp	r3, #41	; 0x29
 800373e:	d111      	bne.n	8003764 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2221      	movs	r2, #33	; 0x21
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2228      	movs	r2, #40	; 0x28
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff f9cf 	bl	8002b02 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d011      	beq.n	80037a2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02c      	beq.n	8003820 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d114      	bne.n	8003820 <I2C_SlaveReceive_RXNE+0x74>
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b2a      	cmp	r3, #42	; 0x2a
 80037fa:	d111      	bne.n	8003820 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2222      	movs	r2, #34	; 0x22
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2228      	movs	r2, #40	; 0x28
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff f97a 	bl	8002b14 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003884:	2b28      	cmp	r3, #40	; 0x28
 8003886:	d127      	bne.n	80038d8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003896:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	09db      	lsrs	r3, r3, #7
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	81bb      	strh	r3, [r7, #12]
 80038ba:	e002      	b.n	80038c2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80038ca:	89ba      	ldrh	r2, [r7, #12]
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	4619      	mov	r1, r3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff f928 	bl	8002b26 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80038d6:	e00e      	b.n	80038f6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800391e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395c:	d172      	bne.n	8003a44 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b22      	cmp	r3, #34	; 0x22
 8003962:	d002      	beq.n	800396a <I2C_Slave_STOPF+0x6a>
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b2a      	cmp	r3, #42	; 0x2a
 8003968:	d135      	bne.n	80039d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fafa 	bl	8001f9c <HAL_DMA_GetState>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d049      	beq.n	8003a42 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	4a69      	ldr	r2, [pc, #420]	; (8003b58 <I2C_Slave_STOPF+0x258>)
 80039b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fa76 	bl	8001eac <HAL_DMA_Abort_IT>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d03d      	beq.n	8003a42 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039d0:	4610      	mov	r0, r2
 80039d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039d4:	e035      	b.n	8003a42 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f043 0204 	orr.w	r2, r3, #4
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fac4 	bl	8001f9c <HAL_DMA_GetState>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d014      	beq.n	8003a44 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	4a4e      	ldr	r2, [pc, #312]	; (8003b58 <I2C_Slave_STOPF+0x258>)
 8003a20:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fa40 	bl	8001eac <HAL_DMA_Abort_IT>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4798      	blx	r3
 8003a40:	e000      	b.n	8003a44 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a42:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03e      	beq.n	8003acc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d112      	bne.n	8003a82 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d112      	bne.n	8003ab6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f043 0204 	orr.w	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f843 	bl	8003b60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003ada:	e039      	b.n	8003b50 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b2a      	cmp	r3, #42	; 0x2a
 8003ae0:	d109      	bne.n	8003af6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2228      	movs	r2, #40	; 0x28
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff f80f 	bl	8002b14 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b28      	cmp	r3, #40	; 0x28
 8003b00:	d111      	bne.n	8003b26 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <I2C_Slave_STOPF+0x25c>)
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff f80e 	bl	8002b40 <HAL_I2C_ListenCpltCallback>
}
 8003b24:	e014      	b.n	8003b50 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	2b22      	cmp	r3, #34	; 0x22
 8003b2c:	d002      	beq.n	8003b34 <I2C_Slave_STOPF+0x234>
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b22      	cmp	r3, #34	; 0x22
 8003b32:	d10d      	bne.n	8003b50 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fe ffe2 	bl	8002b14 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	08003ec9 	.word	0x08003ec9
 8003b5c:	ffff0000 	.word	0xffff0000

08003b60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b78:	7bbb      	ldrb	r3, [r7, #14]
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d002      	beq.n	8003b84 <I2C_ITError+0x24>
 8003b7e:	7bbb      	ldrb	r3, [r7, #14]
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d10a      	bne.n	8003b9a <I2C_ITError+0x3a>
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b22      	cmp	r3, #34	; 0x22
 8003b88:	d107      	bne.n	8003b9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ba0:	2b28      	cmp	r3, #40	; 0x28
 8003ba2:	d107      	bne.n	8003bb4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2228      	movs	r2, #40	; 0x28
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bb2:	e015      	b.n	8003be0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc2:	d00a      	beq.n	8003bda <I2C_ITError+0x7a>
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b60      	cmp	r3, #96	; 0x60
 8003bc8:	d007      	beq.n	8003bda <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bee:	d162      	bne.n	8003cb6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d020      	beq.n	8003c50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	4a6a      	ldr	r2, [pc, #424]	; (8003dbc <I2C_ITError+0x25c>)
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe f946 	bl	8001eac <HAL_DMA_Abort_IT>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8089 	beq.w	8003d3a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4798      	blx	r3
 8003c4e:	e074      	b.n	8003d3a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	4a59      	ldr	r2, [pc, #356]	; (8003dbc <I2C_ITError+0x25c>)
 8003c56:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe f925 	bl	8001eac <HAL_DMA_Abort_IT>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d068      	beq.n	8003d3a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d10b      	bne.n	8003c8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4798      	blx	r3
 8003cb4:	e041      	b.n	8003d3a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b60      	cmp	r3, #96	; 0x60
 8003cc0:	d125      	bne.n	8003d0e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d10b      	bne.n	8003cf6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fe ff3e 	bl	8002b88 <HAL_I2C_AbortCpltCallback>
 8003d0c:	e015      	b.n	8003d3a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d10b      	bne.n	8003d34 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fe ff1e 	bl	8002b76 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10e      	bne.n	8003d68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d113      	bne.n	8003db4 <I2C_ITError+0x254>
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b28      	cmp	r3, #40	; 0x28
 8003d90:	d110      	bne.n	8003db4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <I2C_ITError+0x260>)
 8003d96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fe fec6 	bl	8002b40 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	08003ec9 	.word	0x08003ec9
 8003dc0:	ffff0000 	.word	0xffff0000

08003dc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d006      	beq.n	8003dee <I2C_MasterRequestWrite+0x2a>
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d003      	beq.n	8003dee <I2C_MasterRequestWrite+0x2a>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dec:	d108      	bne.n	8003e00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e00b      	b.n	8003e18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	2b12      	cmp	r3, #18
 8003e06:	d107      	bne.n	8003e18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f8f7 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3e:	d103      	bne.n	8003e48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e035      	b.n	8003eb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e54:	d108      	bne.n	8003e68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e56:	897b      	ldrh	r3, [r7, #10]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e64:	611a      	str	r2, [r3, #16]
 8003e66:	e01b      	b.n	8003ea0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e68:	897b      	ldrh	r3, [r7, #10]
 8003e6a:	11db      	asrs	r3, r3, #7
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f003 0306 	and.w	r3, r3, #6
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f063 030f 	orn	r3, r3, #15
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	490e      	ldr	r1, [pc, #56]	; (8003ec0 <I2C_MasterRequestWrite+0xfc>)
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f940 	bl	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e010      	b.n	8003eb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e96:	897b      	ldrh	r3, [r7, #10]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4907      	ldr	r1, [pc, #28]	; (8003ec4 <I2C_MasterRequestWrite+0x100>)
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f930 	bl	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	00010008 	.word	0x00010008
 8003ec4:	00010002 	.word	0x00010002

08003ec8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ee2:	4b4b      	ldr	r3, [pc, #300]	; (8004010 <I2C_DMAAbort+0x148>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	08db      	lsrs	r3, r3, #3
 8003ee8:	4a4a      	ldr	r2, [pc, #296]	; (8004014 <I2C_DMAAbort+0x14c>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0a1a      	lsrs	r2, r3, #8
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00da      	lsls	r2, r3, #3
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003f0e:	e00a      	b.n	8003f26 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f24:	d0ea      	beq.n	8003efc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	2200      	movs	r2, #0
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	2200      	movs	r2, #0
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f68:	2200      	movs	r2, #0
 8003f6a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	2200      	movs	r2, #0
 8003f7a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b60      	cmp	r3, #96	; 0x60
 8003f96:	d10e      	bne.n	8003fb6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2200      	movs	r2, #0
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f7fe fdea 	bl	8002b88 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fb4:	e027      	b.n	8004006 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fb6:	7cfb      	ldrb	r3, [r7, #19]
 8003fb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fbc:	2b28      	cmp	r3, #40	; 0x28
 8003fbe:	d117      	bne.n	8003ff0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2228      	movs	r2, #40	; 0x28
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fee:	e007      	b.n	8004000 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004000:	6978      	ldr	r0, [r7, #20]
 8004002:	f7fe fdb8 	bl	8002b76 <HAL_I2C_ErrorCallback>
}
 8004006:	bf00      	nop
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000018 	.word	0x20000018
 8004014:	14f8b589 	.word	0x14f8b589

08004018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	4613      	mov	r3, r2
 8004026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004028:	e048      	b.n	80040bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d044      	beq.n	80040bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004032:	f7fd fdff 	bl	8001c34 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d302      	bcc.n	8004048 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d139      	bne.n	80040bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d10d      	bne.n	800406e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	43da      	mvns	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	e00c      	b.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x70>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	43da      	mvns	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	429a      	cmp	r2, r3
 800408c:	d116      	bne.n	80040bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e023      	b.n	8004104 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d10d      	bne.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	43da      	mvns	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	e00c      	b.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	43da      	mvns	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4013      	ands	r3, r2
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d093      	beq.n	800402a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800411a:	e071      	b.n	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d123      	bne.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004144:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f043 0204 	orr.w	r2, r3, #4
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e067      	b.n	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d041      	beq.n	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417c:	f7fd fd5a 	bl	8001c34 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d136      	bne.n	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d10c      	bne.n	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	43da      	mvns	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bf14      	ite	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	2300      	moveq	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	e00b      	b.n	80041ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	43da      	mvns	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4013      	ands	r3, r2
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d016      	beq.n	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e021      	b.n	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	0c1b      	lsrs	r3, r3, #16
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	d10c      	bne.n	8004224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	43da      	mvns	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	e00b      	b.n	800423c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	43da      	mvns	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	bf14      	ite	ne
 8004236:	2301      	movne	r3, #1
 8004238:	2300      	moveq	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	f47f af6d 	bne.w	800411c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004258:	e034      	b.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f8b8 	bl	80043d0 <I2C_IsAcknowledgeFailed>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e034      	b.n	80042d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d028      	beq.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fd fcdf 	bl	8001c34 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11d      	bne.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d016      	beq.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e007      	b.n	80042d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d1c3      	bne.n	800425a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042e8:	e034      	b.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f870 	bl	80043d0 <I2C_IsAcknowledgeFailed>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e034      	b.n	8004364 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d028      	beq.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7fd fc97 	bl	8001c34 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d11d      	bne.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b04      	cmp	r3, #4
 8004324:	d016      	beq.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e007      	b.n	8004364 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b04      	cmp	r3, #4
 8004360:	d1c3      	bne.n	80042ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004378:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	0a1a      	lsrs	r2, r3, #8
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b01      	subs	r3, #1
 8004392:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d107      	bne.n	80043aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e008      	b.n	80043bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b8:	d0e9      	beq.n	800438e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000018 	.word	0x20000018
 80043cc:	14f8b589 	.word	0x14f8b589

080043d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e6:	d11b      	bne.n	8004420 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0204 	orr.w	r2, r3, #4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800443c:	d103      	bne.n	8004446 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004444:	e007      	b.n	8004456 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800444e:	d102      	bne.n	8004456 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2208      	movs	r2, #8
 8004454:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e036      	b.n	80044e0 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800447a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f245 5255 	movw	r2, #21845	; 0x5555
 8004484:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6852      	ldr	r2, [r2, #4]
 800448e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6892      	ldr	r2, [r2, #8]
 8004498:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800449a:	f7fd fbcb 	bl	8001c34 <HAL_GetTick>
 800449e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80044a0:	e011      	b.n	80044c6 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80044a2:	f7fd fbc7 	bl	8001c34 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 323c 	movw	r2, #4924	; 0x133c
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d908      	bls.n	80044c6 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e00c      	b.n	80044e0 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e6      	bne.n	80044a2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80044dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80044f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr
	...

08004508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e26c      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8087 	beq.w	8004636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004528:	4b92      	ldr	r3, [pc, #584]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	2b04      	cmp	r3, #4
 8004532:	d00c      	beq.n	800454e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004534:	4b8f      	ldr	r3, [pc, #572]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b08      	cmp	r3, #8
 800453e:	d112      	bne.n	8004566 <HAL_RCC_OscConfig+0x5e>
 8004540:	4b8c      	ldr	r3, [pc, #560]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454c:	d10b      	bne.n	8004566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454e:	4b89      	ldr	r3, [pc, #548]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d06c      	beq.n	8004634 <HAL_RCC_OscConfig+0x12c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d168      	bne.n	8004634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e246      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456e:	d106      	bne.n	800457e <HAL_RCC_OscConfig+0x76>
 8004570:	4b80      	ldr	r3, [pc, #512]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a7f      	ldr	r2, [pc, #508]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	e02e      	b.n	80045dc <HAL_RCC_OscConfig+0xd4>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x98>
 8004586:	4b7b      	ldr	r3, [pc, #492]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a7a      	ldr	r2, [pc, #488]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b78      	ldr	r3, [pc, #480]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a77      	ldr	r2, [pc, #476]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e01d      	b.n	80045dc <HAL_RCC_OscConfig+0xd4>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0xbc>
 80045aa:	4b72      	ldr	r3, [pc, #456]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a71      	ldr	r2, [pc, #452]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b6f      	ldr	r3, [pc, #444]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a6e      	ldr	r2, [pc, #440]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e00b      	b.n	80045dc <HAL_RCC_OscConfig+0xd4>
 80045c4:	4b6b      	ldr	r3, [pc, #428]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a6a      	ldr	r2, [pc, #424]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80045ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4b68      	ldr	r3, [pc, #416]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a67      	ldr	r2, [pc, #412]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80045d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d013      	beq.n	800460c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd fb26 	bl	8001c34 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fd fb22 	bl	8001c34 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b64      	cmp	r3, #100	; 0x64
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1fa      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	4b5d      	ldr	r3, [pc, #372]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0xe4>
 800460a:	e014      	b.n	8004636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fd fb12 	bl	8001c34 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd fb0e 	bl	8001c34 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e1e6      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004626:	4b53      	ldr	r3, [pc, #332]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x10c>
 8004632:	e000      	b.n	8004636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d063      	beq.n	800470a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004642:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800464e:	4b49      	ldr	r3, [pc, #292]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b08      	cmp	r3, #8
 8004658:	d11c      	bne.n	8004694 <HAL_RCC_OscConfig+0x18c>
 800465a:	4b46      	ldr	r3, [pc, #280]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d116      	bne.n	8004694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004666:	4b43      	ldr	r3, [pc, #268]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_RCC_OscConfig+0x176>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e1ba      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4939      	ldr	r1, [pc, #228]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	e03a      	b.n	800470a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800469c:	4b36      	ldr	r3, [pc, #216]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7fd fac7 	bl	8001c34 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046aa:	f7fd fac3 	bl	8001c34 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e19b      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046bc:	4b2d      	ldr	r3, [pc, #180]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c8:	4b2a      	ldr	r3, [pc, #168]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4927      	ldr	r1, [pc, #156]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]
 80046dc:	e015      	b.n	800470a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046de:	4b26      	ldr	r3, [pc, #152]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fd faa6 	bl	8001c34 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ec:	f7fd faa2 	bl	8001c34 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e17a      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d03a      	beq.n	800478c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d019      	beq.n	8004752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471e:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_RCC_OscConfig+0x274>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004724:	f7fd fa86 	bl	8001c34 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472c:	f7fd fa82 	bl	8001c34 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e15a      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <HAL_RCC_OscConfig+0x26c>)
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800474a:	2001      	movs	r0, #1
 800474c:	f000 fab8 	bl	8004cc0 <RCC_Delay>
 8004750:	e01c      	b.n	800478c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_RCC_OscConfig+0x274>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004758:	f7fd fa6c 	bl	8001c34 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800475e:	e00f      	b.n	8004780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004760:	f7fd fa68 	bl	8001c34 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d908      	bls.n	8004780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e140      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
 8004772:	bf00      	nop
 8004774:	40021000 	.word	0x40021000
 8004778:	42420000 	.word	0x42420000
 800477c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004780:	4b9e      	ldr	r3, [pc, #632]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e9      	bne.n	8004760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80a6 	beq.w	80048e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479e:	4b97      	ldr	r3, [pc, #604]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10d      	bne.n	80047c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	4b94      	ldr	r3, [pc, #592]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4a93      	ldr	r2, [pc, #588]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b4:	61d3      	str	r3, [r2, #28]
 80047b6:	4b91      	ldr	r3, [pc, #580]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	4b8e      	ldr	r3, [pc, #568]	; (8004a00 <HAL_RCC_OscConfig+0x4f8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d118      	bne.n	8004804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d2:	4b8b      	ldr	r3, [pc, #556]	; (8004a00 <HAL_RCC_OscConfig+0x4f8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a8a      	ldr	r2, [pc, #552]	; (8004a00 <HAL_RCC_OscConfig+0x4f8>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047de:	f7fd fa29 	bl	8001c34 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fd fa25 	bl	8001c34 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b64      	cmp	r3, #100	; 0x64
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0fd      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	4b81      	ldr	r3, [pc, #516]	; (8004a00 <HAL_RCC_OscConfig+0x4f8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x312>
 800480c:	4b7b      	ldr	r3, [pc, #492]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4a7a      	ldr	r2, [pc, #488]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6213      	str	r3, [r2, #32]
 8004818:	e02d      	b.n	8004876 <HAL_RCC_OscConfig+0x36e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x334>
 8004822:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	4a75      	ldr	r2, [pc, #468]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	6213      	str	r3, [r2, #32]
 800482e:	4b73      	ldr	r3, [pc, #460]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4a72      	ldr	r2, [pc, #456]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	6213      	str	r3, [r2, #32]
 800483a:	e01c      	b.n	8004876 <HAL_RCC_OscConfig+0x36e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b05      	cmp	r3, #5
 8004842:	d10c      	bne.n	800485e <HAL_RCC_OscConfig+0x356>
 8004844:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	4a6c      	ldr	r2, [pc, #432]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 800484a:	f043 0304 	orr.w	r3, r3, #4
 800484e:	6213      	str	r3, [r2, #32]
 8004850:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	4a69      	ldr	r2, [pc, #420]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6213      	str	r3, [r2, #32]
 800485c:	e00b      	b.n	8004876 <HAL_RCC_OscConfig+0x36e>
 800485e:	4b67      	ldr	r3, [pc, #412]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4a66      	ldr	r2, [pc, #408]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	6213      	str	r3, [r2, #32]
 800486a:	4b64      	ldr	r3, [pc, #400]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	4a63      	ldr	r2, [pc, #396]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d015      	beq.n	80048aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487e:	f7fd f9d9 	bl	8001c34 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004884:	e00a      	b.n	800489c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	f7fd f9d5 	bl	8001c34 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0ab      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489c:	4b57      	ldr	r3, [pc, #348]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ee      	beq.n	8004886 <HAL_RCC_OscConfig+0x37e>
 80048a8:	e014      	b.n	80048d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048aa:	f7fd f9c3 	bl	8001c34 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b0:	e00a      	b.n	80048c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b2:	f7fd f9bf 	bl	8001c34 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e095      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c8:	4b4c      	ldr	r3, [pc, #304]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1ee      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d105      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4b48      	ldr	r3, [pc, #288]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	4a47      	ldr	r2, [pc, #284]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8081 	beq.w	80049f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f0:	4b42      	ldr	r3, [pc, #264]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d061      	beq.n	80049c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d146      	bne.n	8004992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004904:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <HAL_RCC_OscConfig+0x4fc>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490a:	f7fd f993 	bl	8001c34 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004912:	f7fd f98f 	bl	8001c34 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e067      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004924:	4b35      	ldr	r3, [pc, #212]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f0      	bne.n	8004912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004938:	d108      	bne.n	800494c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800493a:	4b30      	ldr	r3, [pc, #192]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	492d      	ldr	r1, [pc, #180]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494c:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a19      	ldr	r1, [r3, #32]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	430b      	orrs	r3, r1
 800495e:	4927      	ldr	r1, [pc, #156]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004964:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <HAL_RCC_OscConfig+0x4fc>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7fd f963 	bl	8001c34 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004972:	f7fd f95f 	bl	8001c34 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e037      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004984:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x46a>
 8004990:	e02f      	b.n	80049f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004992:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <HAL_RCC_OscConfig+0x4fc>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f7fd f94c 	bl	8001c34 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a0:	f7fd f948 	bl	8001c34 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e020      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x498>
 80049be:	e018      	b.n	80049f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e013      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_RCC_OscConfig+0x4f4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d106      	bne.n	80049ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40007000 	.word	0x40007000
 8004a04:	42420060 	.word	0x42420060

08004a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0d0      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d910      	bls.n	8004a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 0207 	bic.w	r2, r3, #7
 8004a32:	4965      	ldr	r1, [pc, #404]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	4b63      	ldr	r3, [pc, #396]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0b8      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d020      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4a58      	ldr	r2, [pc, #352]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a7c:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4a52      	ldr	r2, [pc, #328]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a88:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	494d      	ldr	r1, [pc, #308]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d040      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aae:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d115      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e07f      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac6:	4b41      	ldr	r3, [pc, #260]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e073      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	4b3d      	ldr	r3, [pc, #244]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06b      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f023 0203 	bic.w	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4936      	ldr	r1, [pc, #216]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af8:	f7fd f89c 	bl	8001c34 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b00:	f7fd f898 	bl	8001c34 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e053      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 020c 	and.w	r2, r3, #12
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d1eb      	bne.n	8004b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b28:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d210      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 0207 	bic.w	r2, r3, #7
 8004b3e:	4922      	ldr	r1, [pc, #136]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e032      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4916      	ldr	r1, [pc, #88]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	490e      	ldr	r1, [pc, #56]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b96:	f000 f821 	bl	8004bdc <HAL_RCC_GetSysClockFreq>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	490a      	ldr	r1, [pc, #40]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	5ccb      	ldrb	r3, [r1, r3]
 8004baa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8004bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fc fffa 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40022000 	.word	0x40022000
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	08005ecc 	.word	0x08005ecc
 8004bd4:	20000018 	.word	0x20000018
 8004bd8:	20000020 	.word	0x20000020

08004bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d002      	beq.n	8004c0c <HAL_RCC_GetSysClockFreq+0x30>
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d003      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0x36>
 8004c0a:	e027      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c0c:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c0e:	613b      	str	r3, [r7, #16]
      break;
 8004c10:	e027      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	0c9b      	lsrs	r3, r3, #18
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c1c:	5cd3      	ldrb	r3, [r2, r3]
 8004c1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d010      	beq.n	8004c4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c2a:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	0c5b      	lsrs	r3, r3, #17
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c3e:	fb02 f203 	mul.w	r2, r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e004      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a0c      	ldr	r2, [pc, #48]	; (8004c80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c50:	fb02 f303 	mul.w	r3, r2, r3
 8004c54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	613b      	str	r3, [r7, #16]
      break;
 8004c5a:	e002      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c5e:	613b      	str	r3, [r7, #16]
      break;
 8004c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c62:	693b      	ldr	r3, [r7, #16]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40021000 	.word	0x40021000
 8004c74:	007a1200 	.word	0x007a1200
 8004c78:	08005ee4 	.word	0x08005ee4
 8004c7c:	08005ef4 	.word	0x08005ef4
 8004c80:	003d0900 	.word	0x003d0900

08004c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c88:	4b02      	ldr	r3, [pc, #8]	; (8004c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr
 8004c94:	20000018 	.word	0x20000018

08004c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c9c:	f7ff fff2 	bl	8004c84 <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	08005edc 	.word	0x08005edc

08004cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <RCC_Delay+0x34>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <RCC_Delay+0x38>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0a5b      	lsrs	r3, r3, #9
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cdc:	bf00      	nop
  }
  while (Delay --);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	60fa      	str	r2, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f9      	bne.n	8004cdc <RCC_Delay+0x1c>
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	20000018 	.word	0x20000018
 8004cf8:	10624dd3 	.word	0x10624dd3

08004cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e041      	b.n	8004d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc fddc 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f000 fa5c 	bl	80051f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d001      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e03a      	b.n	8004e2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <HAL_TIM_Base_Start_IT+0x98>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00e      	beq.n	8004df4 <HAL_TIM_Base_Start_IT+0x58>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d009      	beq.n	8004df4 <HAL_TIM_Base_Start_IT+0x58>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a14      	ldr	r2, [pc, #80]	; (8004e38 <HAL_TIM_Base_Start_IT+0x9c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_TIM_Base_Start_IT+0x58>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <HAL_TIM_Base_Start_IT+0xa0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d111      	bne.n	8004e18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b06      	cmp	r3, #6
 8004e04:	d010      	beq.n	8004e28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0201 	orr.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e16:	e007      	b.n	8004e28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800

08004e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d020      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01b      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0202 	mvn.w	r2, #2
 8004e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f998 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f98b 	bl	80051ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f99a 	bl	80051d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d020      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01b      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0204 	mvn.w	r2, #4
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f972 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f965 	bl	80051ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f974 	bl	80051d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d020      	beq.n	8004f3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01b      	beq.n	8004f3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0208 	mvn.w	r2, #8
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2204      	movs	r2, #4
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f94c 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f93f 	bl	80051ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f94e 	bl	80051d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d020      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01b      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0210 	mvn.w	r2, #16
 8004f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f926 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f919 	bl	80051ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f928 	bl	80051d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0201 	mvn.w	r2, #1
 8004fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fb fc96 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa7f 	bl	80054ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8f8 	bl	80051e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0220 	mvn.w	r2, #32
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa52 	bl	80054bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_TIM_ConfigClockSource+0x1c>
 8005038:	2302      	movs	r3, #2
 800503a:	e0b4      	b.n	80051a6 <HAL_TIM_ConfigClockSource+0x186>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800505a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005074:	d03e      	beq.n	80050f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507a:	f200 8087 	bhi.w	800518c <HAL_TIM_ConfigClockSource+0x16c>
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005082:	f000 8086 	beq.w	8005192 <HAL_TIM_ConfigClockSource+0x172>
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508a:	d87f      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b70      	cmp	r3, #112	; 0x70
 800508e:	d01a      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005090:	2b70      	cmp	r3, #112	; 0x70
 8005092:	d87b      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b60      	cmp	r3, #96	; 0x60
 8005096:	d050      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x11a>
 8005098:	2b60      	cmp	r3, #96	; 0x60
 800509a:	d877      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b50      	cmp	r3, #80	; 0x50
 800509e:	d03c      	beq.n	800511a <HAL_TIM_ConfigClockSource+0xfa>
 80050a0:	2b50      	cmp	r3, #80	; 0x50
 80050a2:	d873      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b40      	cmp	r3, #64	; 0x40
 80050a6:	d058      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x13a>
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d86f      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b30      	cmp	r3, #48	; 0x30
 80050ae:	d064      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	2b30      	cmp	r3, #48	; 0x30
 80050b2:	d86b      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d060      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x15a>
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d867      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d05c      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x15a>
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d05a      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x15a>
 80050c4:	e062      	b.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6899      	ldr	r1, [r3, #8]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f000 f974 	bl	80053c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	609a      	str	r2, [r3, #8]
      break;
 80050f2:	e04f      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6899      	ldr	r1, [r3, #8]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f000 f95d 	bl	80053c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005116:	609a      	str	r2, [r3, #8]
      break;
 8005118:	e03c      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	461a      	mov	r2, r3
 8005128:	f000 f8d4 	bl	80052d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2150      	movs	r1, #80	; 0x50
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f92b 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 8005138:	e02c      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	461a      	mov	r2, r3
 8005148:	f000 f8f2 	bl	8005330 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2160      	movs	r1, #96	; 0x60
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f91b 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 8005158:	e01c      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	f000 f8b4 	bl	80052d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2140      	movs	r1, #64	; 0x40
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f90b 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 8005178:	e00c      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 f902 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 800518a:	e003      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      break;
 8005190:	e000      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr
	...

080051f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a2f      	ldr	r2, [pc, #188]	; (80052c8 <TIM_Base_SetConfig+0xd0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00b      	beq.n	8005228 <TIM_Base_SetConfig+0x30>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005216:	d007      	beq.n	8005228 <TIM_Base_SetConfig+0x30>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <TIM_Base_SetConfig+0xd4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <TIM_Base_SetConfig+0x30>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <TIM_Base_SetConfig+0xd8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d108      	bne.n	800523a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <TIM_Base_SetConfig+0xd0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00b      	beq.n	800525a <TIM_Base_SetConfig+0x62>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005248:	d007      	beq.n	800525a <TIM_Base_SetConfig+0x62>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <TIM_Base_SetConfig+0xd4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d003      	beq.n	800525a <TIM_Base_SetConfig+0x62>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <TIM_Base_SetConfig+0xd8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d108      	bne.n	800526c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a0d      	ldr	r2, [pc, #52]	; (80052c8 <TIM_Base_SetConfig+0xd0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d103      	bne.n	80052a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f023 0201 	bic.w	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	611a      	str	r2, [r3, #16]
  }
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800

080052d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f023 0201 	bic.w	r2, r3, #1
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 030a 	bic.w	r3, r3, #10
 8005310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	621a      	str	r2, [r3, #32]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0210 	bic.w	r2, r3, #16
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800535a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	031b      	lsls	r3, r3, #12
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800536c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f043 0307 	orr.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	021a      	lsls	r2, r3, #8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	609a      	str	r2, [r3, #8]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005414:	2302      	movs	r3, #2
 8005416:	e046      	b.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005464:	d009      	beq.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10c      	bne.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	4313      	orrs	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800

080054bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <__errno>:
 80054e0:	4b01      	ldr	r3, [pc, #4]	; (80054e8 <__errno+0x8>)
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000028 	.word	0x20000028

080054ec <__libc_init_array>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	2600      	movs	r6, #0
 80054f0:	4d0c      	ldr	r5, [pc, #48]	; (8005524 <__libc_init_array+0x38>)
 80054f2:	4c0d      	ldr	r4, [pc, #52]	; (8005528 <__libc_init_array+0x3c>)
 80054f4:	1b64      	subs	r4, r4, r5
 80054f6:	10a4      	asrs	r4, r4, #2
 80054f8:	42a6      	cmp	r6, r4
 80054fa:	d109      	bne.n	8005510 <__libc_init_array+0x24>
 80054fc:	f000 fc5c 	bl	8005db8 <_init>
 8005500:	2600      	movs	r6, #0
 8005502:	4d0a      	ldr	r5, [pc, #40]	; (800552c <__libc_init_array+0x40>)
 8005504:	4c0a      	ldr	r4, [pc, #40]	; (8005530 <__libc_init_array+0x44>)
 8005506:	1b64      	subs	r4, r4, r5
 8005508:	10a4      	asrs	r4, r4, #2
 800550a:	42a6      	cmp	r6, r4
 800550c:	d105      	bne.n	800551a <__libc_init_array+0x2e>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	f855 3b04 	ldr.w	r3, [r5], #4
 8005514:	4798      	blx	r3
 8005516:	3601      	adds	r6, #1
 8005518:	e7ee      	b.n	80054f8 <__libc_init_array+0xc>
 800551a:	f855 3b04 	ldr.w	r3, [r5], #4
 800551e:	4798      	blx	r3
 8005520:	3601      	adds	r6, #1
 8005522:	e7f2      	b.n	800550a <__libc_init_array+0x1e>
 8005524:	08005f2c 	.word	0x08005f2c
 8005528:	08005f2c 	.word	0x08005f2c
 800552c:	08005f2c 	.word	0x08005f2c
 8005530:	08005f30 	.word	0x08005f30

08005534 <memset>:
 8005534:	4603      	mov	r3, r0
 8005536:	4402      	add	r2, r0
 8005538:	4293      	cmp	r3, r2
 800553a:	d100      	bne.n	800553e <memset+0xa>
 800553c:	4770      	bx	lr
 800553e:	f803 1b01 	strb.w	r1, [r3], #1
 8005542:	e7f9      	b.n	8005538 <memset+0x4>

08005544 <siprintf>:
 8005544:	b40e      	push	{r1, r2, r3}
 8005546:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800554a:	b500      	push	{lr}
 800554c:	b09c      	sub	sp, #112	; 0x70
 800554e:	ab1d      	add	r3, sp, #116	; 0x74
 8005550:	9002      	str	r0, [sp, #8]
 8005552:	9006      	str	r0, [sp, #24]
 8005554:	9107      	str	r1, [sp, #28]
 8005556:	9104      	str	r1, [sp, #16]
 8005558:	4808      	ldr	r0, [pc, #32]	; (800557c <siprintf+0x38>)
 800555a:	4909      	ldr	r1, [pc, #36]	; (8005580 <siprintf+0x3c>)
 800555c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005560:	9105      	str	r1, [sp, #20]
 8005562:	6800      	ldr	r0, [r0, #0]
 8005564:	a902      	add	r1, sp, #8
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	f000 f868 	bl	800563c <_svfiprintf_r>
 800556c:	2200      	movs	r2, #0
 800556e:	9b02      	ldr	r3, [sp, #8]
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	b01c      	add	sp, #112	; 0x70
 8005574:	f85d eb04 	ldr.w	lr, [sp], #4
 8005578:	b003      	add	sp, #12
 800557a:	4770      	bx	lr
 800557c:	20000028 	.word	0x20000028
 8005580:	ffff0208 	.word	0xffff0208

08005584 <__ssputs_r>:
 8005584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	688e      	ldr	r6, [r1, #8]
 800558a:	4682      	mov	sl, r0
 800558c:	429e      	cmp	r6, r3
 800558e:	460c      	mov	r4, r1
 8005590:	4690      	mov	r8, r2
 8005592:	461f      	mov	r7, r3
 8005594:	d838      	bhi.n	8005608 <__ssputs_r+0x84>
 8005596:	898a      	ldrh	r2, [r1, #12]
 8005598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800559c:	d032      	beq.n	8005604 <__ssputs_r+0x80>
 800559e:	6825      	ldr	r5, [r4, #0]
 80055a0:	6909      	ldr	r1, [r1, #16]
 80055a2:	3301      	adds	r3, #1
 80055a4:	eba5 0901 	sub.w	r9, r5, r1
 80055a8:	6965      	ldr	r5, [r4, #20]
 80055aa:	444b      	add	r3, r9
 80055ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055b4:	106d      	asrs	r5, r5, #1
 80055b6:	429d      	cmp	r5, r3
 80055b8:	bf38      	it	cc
 80055ba:	461d      	movcc	r5, r3
 80055bc:	0553      	lsls	r3, r2, #21
 80055be:	d531      	bpl.n	8005624 <__ssputs_r+0xa0>
 80055c0:	4629      	mov	r1, r5
 80055c2:	f000 fb53 	bl	8005c6c <_malloc_r>
 80055c6:	4606      	mov	r6, r0
 80055c8:	b950      	cbnz	r0, 80055e0 <__ssputs_r+0x5c>
 80055ca:	230c      	movs	r3, #12
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
 80055d0:	f8ca 3000 	str.w	r3, [sl]
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055da:	81a3      	strh	r3, [r4, #12]
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	464a      	mov	r2, r9
 80055e2:	6921      	ldr	r1, [r4, #16]
 80055e4:	f000 face 	bl	8005b84 <memcpy>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	6126      	str	r6, [r4, #16]
 80055f6:	444e      	add	r6, r9
 80055f8:	6026      	str	r6, [r4, #0]
 80055fa:	463e      	mov	r6, r7
 80055fc:	6165      	str	r5, [r4, #20]
 80055fe:	eba5 0509 	sub.w	r5, r5, r9
 8005602:	60a5      	str	r5, [r4, #8]
 8005604:	42be      	cmp	r6, r7
 8005606:	d900      	bls.n	800560a <__ssputs_r+0x86>
 8005608:	463e      	mov	r6, r7
 800560a:	4632      	mov	r2, r6
 800560c:	4641      	mov	r1, r8
 800560e:	6820      	ldr	r0, [r4, #0]
 8005610:	f000 fac6 	bl	8005ba0 <memmove>
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	6822      	ldr	r2, [r4, #0]
 8005618:	1b9b      	subs	r3, r3, r6
 800561a:	4432      	add	r2, r6
 800561c:	2000      	movs	r0, #0
 800561e:	60a3      	str	r3, [r4, #8]
 8005620:	6022      	str	r2, [r4, #0]
 8005622:	e7db      	b.n	80055dc <__ssputs_r+0x58>
 8005624:	462a      	mov	r2, r5
 8005626:	f000 fb7b 	bl	8005d20 <_realloc_r>
 800562a:	4606      	mov	r6, r0
 800562c:	2800      	cmp	r0, #0
 800562e:	d1e1      	bne.n	80055f4 <__ssputs_r+0x70>
 8005630:	4650      	mov	r0, sl
 8005632:	6921      	ldr	r1, [r4, #16]
 8005634:	f000 face 	bl	8005bd4 <_free_r>
 8005638:	e7c7      	b.n	80055ca <__ssputs_r+0x46>
	...

0800563c <_svfiprintf_r>:
 800563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005640:	4698      	mov	r8, r3
 8005642:	898b      	ldrh	r3, [r1, #12]
 8005644:	4607      	mov	r7, r0
 8005646:	061b      	lsls	r3, r3, #24
 8005648:	460d      	mov	r5, r1
 800564a:	4614      	mov	r4, r2
 800564c:	b09d      	sub	sp, #116	; 0x74
 800564e:	d50e      	bpl.n	800566e <_svfiprintf_r+0x32>
 8005650:	690b      	ldr	r3, [r1, #16]
 8005652:	b963      	cbnz	r3, 800566e <_svfiprintf_r+0x32>
 8005654:	2140      	movs	r1, #64	; 0x40
 8005656:	f000 fb09 	bl	8005c6c <_malloc_r>
 800565a:	6028      	str	r0, [r5, #0]
 800565c:	6128      	str	r0, [r5, #16]
 800565e:	b920      	cbnz	r0, 800566a <_svfiprintf_r+0x2e>
 8005660:	230c      	movs	r3, #12
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	e0d1      	b.n	800580e <_svfiprintf_r+0x1d2>
 800566a:	2340      	movs	r3, #64	; 0x40
 800566c:	616b      	str	r3, [r5, #20]
 800566e:	2300      	movs	r3, #0
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	2320      	movs	r3, #32
 8005674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005678:	2330      	movs	r3, #48	; 0x30
 800567a:	f04f 0901 	mov.w	r9, #1
 800567e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005682:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005828 <_svfiprintf_r+0x1ec>
 8005686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800568a:	4623      	mov	r3, r4
 800568c:	469a      	mov	sl, r3
 800568e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005692:	b10a      	cbz	r2, 8005698 <_svfiprintf_r+0x5c>
 8005694:	2a25      	cmp	r2, #37	; 0x25
 8005696:	d1f9      	bne.n	800568c <_svfiprintf_r+0x50>
 8005698:	ebba 0b04 	subs.w	fp, sl, r4
 800569c:	d00b      	beq.n	80056b6 <_svfiprintf_r+0x7a>
 800569e:	465b      	mov	r3, fp
 80056a0:	4622      	mov	r2, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	4638      	mov	r0, r7
 80056a6:	f7ff ff6d 	bl	8005584 <__ssputs_r>
 80056aa:	3001      	adds	r0, #1
 80056ac:	f000 80aa 	beq.w	8005804 <_svfiprintf_r+0x1c8>
 80056b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056b2:	445a      	add	r2, fp
 80056b4:	9209      	str	r2, [sp, #36]	; 0x24
 80056b6:	f89a 3000 	ldrb.w	r3, [sl]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 80a2 	beq.w	8005804 <_svfiprintf_r+0x1c8>
 80056c0:	2300      	movs	r3, #0
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295
 80056c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056ca:	f10a 0a01 	add.w	sl, sl, #1
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	9307      	str	r3, [sp, #28]
 80056d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056d6:	931a      	str	r3, [sp, #104]	; 0x68
 80056d8:	4654      	mov	r4, sl
 80056da:	2205      	movs	r2, #5
 80056dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e0:	4851      	ldr	r0, [pc, #324]	; (8005828 <_svfiprintf_r+0x1ec>)
 80056e2:	f000 fa41 	bl	8005b68 <memchr>
 80056e6:	9a04      	ldr	r2, [sp, #16]
 80056e8:	b9d8      	cbnz	r0, 8005722 <_svfiprintf_r+0xe6>
 80056ea:	06d0      	lsls	r0, r2, #27
 80056ec:	bf44      	itt	mi
 80056ee:	2320      	movmi	r3, #32
 80056f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056f4:	0711      	lsls	r1, r2, #28
 80056f6:	bf44      	itt	mi
 80056f8:	232b      	movmi	r3, #43	; 0x2b
 80056fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005702:	2b2a      	cmp	r3, #42	; 0x2a
 8005704:	d015      	beq.n	8005732 <_svfiprintf_r+0xf6>
 8005706:	4654      	mov	r4, sl
 8005708:	2000      	movs	r0, #0
 800570a:	f04f 0c0a 	mov.w	ip, #10
 800570e:	9a07      	ldr	r2, [sp, #28]
 8005710:	4621      	mov	r1, r4
 8005712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005716:	3b30      	subs	r3, #48	; 0x30
 8005718:	2b09      	cmp	r3, #9
 800571a:	d94e      	bls.n	80057ba <_svfiprintf_r+0x17e>
 800571c:	b1b0      	cbz	r0, 800574c <_svfiprintf_r+0x110>
 800571e:	9207      	str	r2, [sp, #28]
 8005720:	e014      	b.n	800574c <_svfiprintf_r+0x110>
 8005722:	eba0 0308 	sub.w	r3, r0, r8
 8005726:	fa09 f303 	lsl.w	r3, r9, r3
 800572a:	4313      	orrs	r3, r2
 800572c:	46a2      	mov	sl, r4
 800572e:	9304      	str	r3, [sp, #16]
 8005730:	e7d2      	b.n	80056d8 <_svfiprintf_r+0x9c>
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	1d19      	adds	r1, r3, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	9103      	str	r1, [sp, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	bfbb      	ittet	lt
 800573e:	425b      	neglt	r3, r3
 8005740:	f042 0202 	orrlt.w	r2, r2, #2
 8005744:	9307      	strge	r3, [sp, #28]
 8005746:	9307      	strlt	r3, [sp, #28]
 8005748:	bfb8      	it	lt
 800574a:	9204      	strlt	r2, [sp, #16]
 800574c:	7823      	ldrb	r3, [r4, #0]
 800574e:	2b2e      	cmp	r3, #46	; 0x2e
 8005750:	d10c      	bne.n	800576c <_svfiprintf_r+0x130>
 8005752:	7863      	ldrb	r3, [r4, #1]
 8005754:	2b2a      	cmp	r3, #42	; 0x2a
 8005756:	d135      	bne.n	80057c4 <_svfiprintf_r+0x188>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	3402      	adds	r4, #2
 800575c:	1d1a      	adds	r2, r3, #4
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	9203      	str	r2, [sp, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfb8      	it	lt
 8005766:	f04f 33ff 	movlt.w	r3, #4294967295
 800576a:	9305      	str	r3, [sp, #20]
 800576c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005838 <_svfiprintf_r+0x1fc>
 8005770:	2203      	movs	r2, #3
 8005772:	4650      	mov	r0, sl
 8005774:	7821      	ldrb	r1, [r4, #0]
 8005776:	f000 f9f7 	bl	8005b68 <memchr>
 800577a:	b140      	cbz	r0, 800578e <_svfiprintf_r+0x152>
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	eba0 000a 	sub.w	r0, r0, sl
 8005782:	fa03 f000 	lsl.w	r0, r3, r0
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	3401      	adds	r4, #1
 800578a:	4303      	orrs	r3, r0
 800578c:	9304      	str	r3, [sp, #16]
 800578e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005792:	2206      	movs	r2, #6
 8005794:	4825      	ldr	r0, [pc, #148]	; (800582c <_svfiprintf_r+0x1f0>)
 8005796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800579a:	f000 f9e5 	bl	8005b68 <memchr>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d038      	beq.n	8005814 <_svfiprintf_r+0x1d8>
 80057a2:	4b23      	ldr	r3, [pc, #140]	; (8005830 <_svfiprintf_r+0x1f4>)
 80057a4:	bb1b      	cbnz	r3, 80057ee <_svfiprintf_r+0x1b2>
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	3307      	adds	r3, #7
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	3308      	adds	r3, #8
 80057b0:	9303      	str	r3, [sp, #12]
 80057b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b4:	4433      	add	r3, r6
 80057b6:	9309      	str	r3, [sp, #36]	; 0x24
 80057b8:	e767      	b.n	800568a <_svfiprintf_r+0x4e>
 80057ba:	460c      	mov	r4, r1
 80057bc:	2001      	movs	r0, #1
 80057be:	fb0c 3202 	mla	r2, ip, r2, r3
 80057c2:	e7a5      	b.n	8005710 <_svfiprintf_r+0xd4>
 80057c4:	2300      	movs	r3, #0
 80057c6:	f04f 0c0a 	mov.w	ip, #10
 80057ca:	4619      	mov	r1, r3
 80057cc:	3401      	adds	r4, #1
 80057ce:	9305      	str	r3, [sp, #20]
 80057d0:	4620      	mov	r0, r4
 80057d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057d6:	3a30      	subs	r2, #48	; 0x30
 80057d8:	2a09      	cmp	r2, #9
 80057da:	d903      	bls.n	80057e4 <_svfiprintf_r+0x1a8>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0c5      	beq.n	800576c <_svfiprintf_r+0x130>
 80057e0:	9105      	str	r1, [sp, #20]
 80057e2:	e7c3      	b.n	800576c <_svfiprintf_r+0x130>
 80057e4:	4604      	mov	r4, r0
 80057e6:	2301      	movs	r3, #1
 80057e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ec:	e7f0      	b.n	80057d0 <_svfiprintf_r+0x194>
 80057ee:	ab03      	add	r3, sp, #12
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	462a      	mov	r2, r5
 80057f4:	4638      	mov	r0, r7
 80057f6:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <_svfiprintf_r+0x1f8>)
 80057f8:	a904      	add	r1, sp, #16
 80057fa:	f3af 8000 	nop.w
 80057fe:	1c42      	adds	r2, r0, #1
 8005800:	4606      	mov	r6, r0
 8005802:	d1d6      	bne.n	80057b2 <_svfiprintf_r+0x176>
 8005804:	89ab      	ldrh	r3, [r5, #12]
 8005806:	065b      	lsls	r3, r3, #25
 8005808:	f53f af2c 	bmi.w	8005664 <_svfiprintf_r+0x28>
 800580c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800580e:	b01d      	add	sp, #116	; 0x74
 8005810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005814:	ab03      	add	r3, sp, #12
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	462a      	mov	r2, r5
 800581a:	4638      	mov	r0, r7
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <_svfiprintf_r+0x1f8>)
 800581e:	a904      	add	r1, sp, #16
 8005820:	f000 f87c 	bl	800591c <_printf_i>
 8005824:	e7eb      	b.n	80057fe <_svfiprintf_r+0x1c2>
 8005826:	bf00      	nop
 8005828:	08005ef6 	.word	0x08005ef6
 800582c:	08005f00 	.word	0x08005f00
 8005830:	00000000 	.word	0x00000000
 8005834:	08005585 	.word	0x08005585
 8005838:	08005efc 	.word	0x08005efc

0800583c <_printf_common>:
 800583c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	4616      	mov	r6, r2
 8005842:	4699      	mov	r9, r3
 8005844:	688a      	ldr	r2, [r1, #8]
 8005846:	690b      	ldr	r3, [r1, #16]
 8005848:	4607      	mov	r7, r0
 800584a:	4293      	cmp	r3, r2
 800584c:	bfb8      	it	lt
 800584e:	4613      	movlt	r3, r2
 8005850:	6033      	str	r3, [r6, #0]
 8005852:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005856:	460c      	mov	r4, r1
 8005858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800585c:	b10a      	cbz	r2, 8005862 <_printf_common+0x26>
 800585e:	3301      	adds	r3, #1
 8005860:	6033      	str	r3, [r6, #0]
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	0699      	lsls	r1, r3, #26
 8005866:	bf42      	ittt	mi
 8005868:	6833      	ldrmi	r3, [r6, #0]
 800586a:	3302      	addmi	r3, #2
 800586c:	6033      	strmi	r3, [r6, #0]
 800586e:	6825      	ldr	r5, [r4, #0]
 8005870:	f015 0506 	ands.w	r5, r5, #6
 8005874:	d106      	bne.n	8005884 <_printf_common+0x48>
 8005876:	f104 0a19 	add.w	sl, r4, #25
 800587a:	68e3      	ldr	r3, [r4, #12]
 800587c:	6832      	ldr	r2, [r6, #0]
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	42ab      	cmp	r3, r5
 8005882:	dc28      	bgt.n	80058d6 <_printf_common+0x9a>
 8005884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005888:	1e13      	subs	r3, r2, #0
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	bf18      	it	ne
 800588e:	2301      	movne	r3, #1
 8005890:	0692      	lsls	r2, r2, #26
 8005892:	d42d      	bmi.n	80058f0 <_printf_common+0xb4>
 8005894:	4649      	mov	r1, r9
 8005896:	4638      	mov	r0, r7
 8005898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800589c:	47c0      	blx	r8
 800589e:	3001      	adds	r0, #1
 80058a0:	d020      	beq.n	80058e4 <_printf_common+0xa8>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	68e5      	ldr	r5, [r4, #12]
 80058a6:	f003 0306 	and.w	r3, r3, #6
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	bf18      	it	ne
 80058ae:	2500      	movne	r5, #0
 80058b0:	6832      	ldr	r2, [r6, #0]
 80058b2:	f04f 0600 	mov.w	r6, #0
 80058b6:	68a3      	ldr	r3, [r4, #8]
 80058b8:	bf08      	it	eq
 80058ba:	1aad      	subeq	r5, r5, r2
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	bf08      	it	eq
 80058c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bfc4      	itt	gt
 80058c8:	1a9b      	subgt	r3, r3, r2
 80058ca:	18ed      	addgt	r5, r5, r3
 80058cc:	341a      	adds	r4, #26
 80058ce:	42b5      	cmp	r5, r6
 80058d0:	d11a      	bne.n	8005908 <_printf_common+0xcc>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e008      	b.n	80058e8 <_printf_common+0xac>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4652      	mov	r2, sl
 80058da:	4649      	mov	r1, r9
 80058dc:	4638      	mov	r0, r7
 80058de:	47c0      	blx	r8
 80058e0:	3001      	adds	r0, #1
 80058e2:	d103      	bne.n	80058ec <_printf_common+0xb0>
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ec:	3501      	adds	r5, #1
 80058ee:	e7c4      	b.n	800587a <_printf_common+0x3e>
 80058f0:	2030      	movs	r0, #48	; 0x30
 80058f2:	18e1      	adds	r1, r4, r3
 80058f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058fe:	4422      	add	r2, r4
 8005900:	3302      	adds	r3, #2
 8005902:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005906:	e7c5      	b.n	8005894 <_printf_common+0x58>
 8005908:	2301      	movs	r3, #1
 800590a:	4622      	mov	r2, r4
 800590c:	4649      	mov	r1, r9
 800590e:	4638      	mov	r0, r7
 8005910:	47c0      	blx	r8
 8005912:	3001      	adds	r0, #1
 8005914:	d0e6      	beq.n	80058e4 <_printf_common+0xa8>
 8005916:	3601      	adds	r6, #1
 8005918:	e7d9      	b.n	80058ce <_printf_common+0x92>
	...

0800591c <_printf_i>:
 800591c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	460c      	mov	r4, r1
 8005922:	7e27      	ldrb	r7, [r4, #24]
 8005924:	4691      	mov	r9, r2
 8005926:	2f78      	cmp	r7, #120	; 0x78
 8005928:	4680      	mov	r8, r0
 800592a:	469a      	mov	sl, r3
 800592c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800592e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005932:	d807      	bhi.n	8005944 <_printf_i+0x28>
 8005934:	2f62      	cmp	r7, #98	; 0x62
 8005936:	d80a      	bhi.n	800594e <_printf_i+0x32>
 8005938:	2f00      	cmp	r7, #0
 800593a:	f000 80d9 	beq.w	8005af0 <_printf_i+0x1d4>
 800593e:	2f58      	cmp	r7, #88	; 0x58
 8005940:	f000 80a4 	beq.w	8005a8c <_printf_i+0x170>
 8005944:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800594c:	e03a      	b.n	80059c4 <_printf_i+0xa8>
 800594e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005952:	2b15      	cmp	r3, #21
 8005954:	d8f6      	bhi.n	8005944 <_printf_i+0x28>
 8005956:	a001      	add	r0, pc, #4	; (adr r0, 800595c <_printf_i+0x40>)
 8005958:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800595c:	080059b5 	.word	0x080059b5
 8005960:	080059c9 	.word	0x080059c9
 8005964:	08005945 	.word	0x08005945
 8005968:	08005945 	.word	0x08005945
 800596c:	08005945 	.word	0x08005945
 8005970:	08005945 	.word	0x08005945
 8005974:	080059c9 	.word	0x080059c9
 8005978:	08005945 	.word	0x08005945
 800597c:	08005945 	.word	0x08005945
 8005980:	08005945 	.word	0x08005945
 8005984:	08005945 	.word	0x08005945
 8005988:	08005ad7 	.word	0x08005ad7
 800598c:	080059f9 	.word	0x080059f9
 8005990:	08005ab9 	.word	0x08005ab9
 8005994:	08005945 	.word	0x08005945
 8005998:	08005945 	.word	0x08005945
 800599c:	08005af9 	.word	0x08005af9
 80059a0:	08005945 	.word	0x08005945
 80059a4:	080059f9 	.word	0x080059f9
 80059a8:	08005945 	.word	0x08005945
 80059ac:	08005945 	.word	0x08005945
 80059b0:	08005ac1 	.word	0x08005ac1
 80059b4:	680b      	ldr	r3, [r1, #0]
 80059b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	600a      	str	r2, [r1, #0]
 80059c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0a4      	b.n	8005b12 <_printf_i+0x1f6>
 80059c8:	6825      	ldr	r5, [r4, #0]
 80059ca:	6808      	ldr	r0, [r1, #0]
 80059cc:	062e      	lsls	r6, r5, #24
 80059ce:	f100 0304 	add.w	r3, r0, #4
 80059d2:	d50a      	bpl.n	80059ea <_printf_i+0xce>
 80059d4:	6805      	ldr	r5, [r0, #0]
 80059d6:	600b      	str	r3, [r1, #0]
 80059d8:	2d00      	cmp	r5, #0
 80059da:	da03      	bge.n	80059e4 <_printf_i+0xc8>
 80059dc:	232d      	movs	r3, #45	; 0x2d
 80059de:	426d      	negs	r5, r5
 80059e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e4:	230a      	movs	r3, #10
 80059e6:	485e      	ldr	r0, [pc, #376]	; (8005b60 <_printf_i+0x244>)
 80059e8:	e019      	b.n	8005a1e <_printf_i+0x102>
 80059ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059ee:	6805      	ldr	r5, [r0, #0]
 80059f0:	600b      	str	r3, [r1, #0]
 80059f2:	bf18      	it	ne
 80059f4:	b22d      	sxthne	r5, r5
 80059f6:	e7ef      	b.n	80059d8 <_printf_i+0xbc>
 80059f8:	680b      	ldr	r3, [r1, #0]
 80059fa:	6825      	ldr	r5, [r4, #0]
 80059fc:	1d18      	adds	r0, r3, #4
 80059fe:	6008      	str	r0, [r1, #0]
 8005a00:	0628      	lsls	r0, r5, #24
 8005a02:	d501      	bpl.n	8005a08 <_printf_i+0xec>
 8005a04:	681d      	ldr	r5, [r3, #0]
 8005a06:	e002      	b.n	8005a0e <_printf_i+0xf2>
 8005a08:	0669      	lsls	r1, r5, #25
 8005a0a:	d5fb      	bpl.n	8005a04 <_printf_i+0xe8>
 8005a0c:	881d      	ldrh	r5, [r3, #0]
 8005a0e:	2f6f      	cmp	r7, #111	; 0x6f
 8005a10:	bf0c      	ite	eq
 8005a12:	2308      	moveq	r3, #8
 8005a14:	230a      	movne	r3, #10
 8005a16:	4852      	ldr	r0, [pc, #328]	; (8005b60 <_printf_i+0x244>)
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a1e:	6866      	ldr	r6, [r4, #4]
 8005a20:	2e00      	cmp	r6, #0
 8005a22:	bfa8      	it	ge
 8005a24:	6821      	ldrge	r1, [r4, #0]
 8005a26:	60a6      	str	r6, [r4, #8]
 8005a28:	bfa4      	itt	ge
 8005a2a:	f021 0104 	bicge.w	r1, r1, #4
 8005a2e:	6021      	strge	r1, [r4, #0]
 8005a30:	b90d      	cbnz	r5, 8005a36 <_printf_i+0x11a>
 8005a32:	2e00      	cmp	r6, #0
 8005a34:	d04d      	beq.n	8005ad2 <_printf_i+0x1b6>
 8005a36:	4616      	mov	r6, r2
 8005a38:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a3c:	fb03 5711 	mls	r7, r3, r1, r5
 8005a40:	5dc7      	ldrb	r7, [r0, r7]
 8005a42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a46:	462f      	mov	r7, r5
 8005a48:	42bb      	cmp	r3, r7
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	d9f4      	bls.n	8005a38 <_printf_i+0x11c>
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d10b      	bne.n	8005a6a <_printf_i+0x14e>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	07df      	lsls	r7, r3, #31
 8005a56:	d508      	bpl.n	8005a6a <_printf_i+0x14e>
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	6861      	ldr	r1, [r4, #4]
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	bfde      	ittt	le
 8005a60:	2330      	movle	r3, #48	; 0x30
 8005a62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a6a:	1b92      	subs	r2, r2, r6
 8005a6c:	6122      	str	r2, [r4, #16]
 8005a6e:	464b      	mov	r3, r9
 8005a70:	4621      	mov	r1, r4
 8005a72:	4640      	mov	r0, r8
 8005a74:	f8cd a000 	str.w	sl, [sp]
 8005a78:	aa03      	add	r2, sp, #12
 8005a7a:	f7ff fedf 	bl	800583c <_printf_common>
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d14c      	bne.n	8005b1c <_printf_i+0x200>
 8005a82:	f04f 30ff 	mov.w	r0, #4294967295
 8005a86:	b004      	add	sp, #16
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	4834      	ldr	r0, [pc, #208]	; (8005b60 <_printf_i+0x244>)
 8005a8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a92:	680e      	ldr	r6, [r1, #0]
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a9a:	061f      	lsls	r7, r3, #24
 8005a9c:	600e      	str	r6, [r1, #0]
 8005a9e:	d514      	bpl.n	8005aca <_printf_i+0x1ae>
 8005aa0:	07d9      	lsls	r1, r3, #31
 8005aa2:	bf44      	itt	mi
 8005aa4:	f043 0320 	orrmi.w	r3, r3, #32
 8005aa8:	6023      	strmi	r3, [r4, #0]
 8005aaa:	b91d      	cbnz	r5, 8005ab4 <_printf_i+0x198>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	f023 0320 	bic.w	r3, r3, #32
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	e7af      	b.n	8005a18 <_printf_i+0xfc>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	f043 0320 	orr.w	r3, r3, #32
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	2378      	movs	r3, #120	; 0x78
 8005ac2:	4828      	ldr	r0, [pc, #160]	; (8005b64 <_printf_i+0x248>)
 8005ac4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ac8:	e7e3      	b.n	8005a92 <_printf_i+0x176>
 8005aca:	065e      	lsls	r6, r3, #25
 8005acc:	bf48      	it	mi
 8005ace:	b2ad      	uxthmi	r5, r5
 8005ad0:	e7e6      	b.n	8005aa0 <_printf_i+0x184>
 8005ad2:	4616      	mov	r6, r2
 8005ad4:	e7bb      	b.n	8005a4e <_printf_i+0x132>
 8005ad6:	680b      	ldr	r3, [r1, #0]
 8005ad8:	6826      	ldr	r6, [r4, #0]
 8005ada:	1d1d      	adds	r5, r3, #4
 8005adc:	6960      	ldr	r0, [r4, #20]
 8005ade:	600d      	str	r5, [r1, #0]
 8005ae0:	0635      	lsls	r5, r6, #24
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	d501      	bpl.n	8005aea <_printf_i+0x1ce>
 8005ae6:	6018      	str	r0, [r3, #0]
 8005ae8:	e002      	b.n	8005af0 <_printf_i+0x1d4>
 8005aea:	0671      	lsls	r1, r6, #25
 8005aec:	d5fb      	bpl.n	8005ae6 <_printf_i+0x1ca>
 8005aee:	8018      	strh	r0, [r3, #0]
 8005af0:	2300      	movs	r3, #0
 8005af2:	4616      	mov	r6, r2
 8005af4:	6123      	str	r3, [r4, #16]
 8005af6:	e7ba      	b.n	8005a6e <_printf_i+0x152>
 8005af8:	680b      	ldr	r3, [r1, #0]
 8005afa:	1d1a      	adds	r2, r3, #4
 8005afc:	600a      	str	r2, [r1, #0]
 8005afe:	681e      	ldr	r6, [r3, #0]
 8005b00:	2100      	movs	r1, #0
 8005b02:	4630      	mov	r0, r6
 8005b04:	6862      	ldr	r2, [r4, #4]
 8005b06:	f000 f82f 	bl	8005b68 <memchr>
 8005b0a:	b108      	cbz	r0, 8005b10 <_printf_i+0x1f4>
 8005b0c:	1b80      	subs	r0, r0, r6
 8005b0e:	6060      	str	r0, [r4, #4]
 8005b10:	6863      	ldr	r3, [r4, #4]
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	2300      	movs	r3, #0
 8005b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b1a:	e7a8      	b.n	8005a6e <_printf_i+0x152>
 8005b1c:	4632      	mov	r2, r6
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4640      	mov	r0, r8
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	47d0      	blx	sl
 8005b26:	3001      	adds	r0, #1
 8005b28:	d0ab      	beq.n	8005a82 <_printf_i+0x166>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	079b      	lsls	r3, r3, #30
 8005b2e:	d413      	bmi.n	8005b58 <_printf_i+0x23c>
 8005b30:	68e0      	ldr	r0, [r4, #12]
 8005b32:	9b03      	ldr	r3, [sp, #12]
 8005b34:	4298      	cmp	r0, r3
 8005b36:	bfb8      	it	lt
 8005b38:	4618      	movlt	r0, r3
 8005b3a:	e7a4      	b.n	8005a86 <_printf_i+0x16a>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4649      	mov	r1, r9
 8005b42:	4640      	mov	r0, r8
 8005b44:	47d0      	blx	sl
 8005b46:	3001      	adds	r0, #1
 8005b48:	d09b      	beq.n	8005a82 <_printf_i+0x166>
 8005b4a:	3501      	adds	r5, #1
 8005b4c:	68e3      	ldr	r3, [r4, #12]
 8005b4e:	9903      	ldr	r1, [sp, #12]
 8005b50:	1a5b      	subs	r3, r3, r1
 8005b52:	42ab      	cmp	r3, r5
 8005b54:	dcf2      	bgt.n	8005b3c <_printf_i+0x220>
 8005b56:	e7eb      	b.n	8005b30 <_printf_i+0x214>
 8005b58:	2500      	movs	r5, #0
 8005b5a:	f104 0619 	add.w	r6, r4, #25
 8005b5e:	e7f5      	b.n	8005b4c <_printf_i+0x230>
 8005b60:	08005f07 	.word	0x08005f07
 8005b64:	08005f18 	.word	0x08005f18

08005b68 <memchr>:
 8005b68:	4603      	mov	r3, r0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	b2c9      	uxtb	r1, r1
 8005b6e:	4402      	add	r2, r0
 8005b70:	4293      	cmp	r3, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	d101      	bne.n	8005b7a <memchr+0x12>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e003      	b.n	8005b82 <memchr+0x1a>
 8005b7a:	7804      	ldrb	r4, [r0, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	428c      	cmp	r4, r1
 8005b80:	d1f6      	bne.n	8005b70 <memchr+0x8>
 8005b82:	bd10      	pop	{r4, pc}

08005b84 <memcpy>:
 8005b84:	440a      	add	r2, r1
 8005b86:	4291      	cmp	r1, r2
 8005b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b8c:	d100      	bne.n	8005b90 <memcpy+0xc>
 8005b8e:	4770      	bx	lr
 8005b90:	b510      	push	{r4, lr}
 8005b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b96:	4291      	cmp	r1, r2
 8005b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b9c:	d1f9      	bne.n	8005b92 <memcpy+0xe>
 8005b9e:	bd10      	pop	{r4, pc}

08005ba0 <memmove>:
 8005ba0:	4288      	cmp	r0, r1
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	eb01 0402 	add.w	r4, r1, r2
 8005ba8:	d902      	bls.n	8005bb0 <memmove+0x10>
 8005baa:	4284      	cmp	r4, r0
 8005bac:	4623      	mov	r3, r4
 8005bae:	d807      	bhi.n	8005bc0 <memmove+0x20>
 8005bb0:	1e43      	subs	r3, r0, #1
 8005bb2:	42a1      	cmp	r1, r4
 8005bb4:	d008      	beq.n	8005bc8 <memmove+0x28>
 8005bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bbe:	e7f8      	b.n	8005bb2 <memmove+0x12>
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	4402      	add	r2, r0
 8005bc4:	428a      	cmp	r2, r1
 8005bc6:	d100      	bne.n	8005bca <memmove+0x2a>
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bd2:	e7f7      	b.n	8005bc4 <memmove+0x24>

08005bd4 <_free_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	d043      	beq.n	8005c64 <_free_r+0x90>
 8005bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be0:	1f0c      	subs	r4, r1, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	bfb8      	it	lt
 8005be6:	18e4      	addlt	r4, r4, r3
 8005be8:	f000 f8d0 	bl	8005d8c <__malloc_lock>
 8005bec:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <_free_r+0x94>)
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	b933      	cbnz	r3, 8005c02 <_free_r+0x2e>
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	6014      	str	r4, [r2, #0]
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bfe:	f000 b8cb 	b.w	8005d98 <__malloc_unlock>
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	d90a      	bls.n	8005c1c <_free_r+0x48>
 8005c06:	6821      	ldr	r1, [r4, #0]
 8005c08:	1862      	adds	r2, r4, r1
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	bf01      	itttt	eq
 8005c0e:	681a      	ldreq	r2, [r3, #0]
 8005c10:	685b      	ldreq	r3, [r3, #4]
 8005c12:	1852      	addeq	r2, r2, r1
 8005c14:	6022      	streq	r2, [r4, #0]
 8005c16:	6063      	str	r3, [r4, #4]
 8005c18:	6004      	str	r4, [r0, #0]
 8005c1a:	e7ed      	b.n	8005bf8 <_free_r+0x24>
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	b10b      	cbz	r3, 8005c26 <_free_r+0x52>
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	d9fa      	bls.n	8005c1c <_free_r+0x48>
 8005c26:	6811      	ldr	r1, [r2, #0]
 8005c28:	1850      	adds	r0, r2, r1
 8005c2a:	42a0      	cmp	r0, r4
 8005c2c:	d10b      	bne.n	8005c46 <_free_r+0x72>
 8005c2e:	6820      	ldr	r0, [r4, #0]
 8005c30:	4401      	add	r1, r0
 8005c32:	1850      	adds	r0, r2, r1
 8005c34:	4283      	cmp	r3, r0
 8005c36:	6011      	str	r1, [r2, #0]
 8005c38:	d1de      	bne.n	8005bf8 <_free_r+0x24>
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4401      	add	r1, r0
 8005c40:	6011      	str	r1, [r2, #0]
 8005c42:	6053      	str	r3, [r2, #4]
 8005c44:	e7d8      	b.n	8005bf8 <_free_r+0x24>
 8005c46:	d902      	bls.n	8005c4e <_free_r+0x7a>
 8005c48:	230c      	movs	r3, #12
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	e7d4      	b.n	8005bf8 <_free_r+0x24>
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	1821      	adds	r1, r4, r0
 8005c52:	428b      	cmp	r3, r1
 8005c54:	bf01      	itttt	eq
 8005c56:	6819      	ldreq	r1, [r3, #0]
 8005c58:	685b      	ldreq	r3, [r3, #4]
 8005c5a:	1809      	addeq	r1, r1, r0
 8005c5c:	6021      	streq	r1, [r4, #0]
 8005c5e:	6063      	str	r3, [r4, #4]
 8005c60:	6054      	str	r4, [r2, #4]
 8005c62:	e7c9      	b.n	8005bf8 <_free_r+0x24>
 8005c64:	bd38      	pop	{r3, r4, r5, pc}
 8005c66:	bf00      	nop
 8005c68:	200000d4 	.word	0x200000d4

08005c6c <_malloc_r>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	1ccd      	adds	r5, r1, #3
 8005c70:	f025 0503 	bic.w	r5, r5, #3
 8005c74:	3508      	adds	r5, #8
 8005c76:	2d0c      	cmp	r5, #12
 8005c78:	bf38      	it	cc
 8005c7a:	250c      	movcc	r5, #12
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	4606      	mov	r6, r0
 8005c80:	db01      	blt.n	8005c86 <_malloc_r+0x1a>
 8005c82:	42a9      	cmp	r1, r5
 8005c84:	d903      	bls.n	8005c8e <_malloc_r+0x22>
 8005c86:	230c      	movs	r3, #12
 8005c88:	6033      	str	r3, [r6, #0]
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8e:	f000 f87d 	bl	8005d8c <__malloc_lock>
 8005c92:	4921      	ldr	r1, [pc, #132]	; (8005d18 <_malloc_r+0xac>)
 8005c94:	680a      	ldr	r2, [r1, #0]
 8005c96:	4614      	mov	r4, r2
 8005c98:	b99c      	cbnz	r4, 8005cc2 <_malloc_r+0x56>
 8005c9a:	4f20      	ldr	r7, [pc, #128]	; (8005d1c <_malloc_r+0xb0>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	b923      	cbnz	r3, 8005caa <_malloc_r+0x3e>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f000 f862 	bl	8005d6c <_sbrk_r>
 8005ca8:	6038      	str	r0, [r7, #0]
 8005caa:	4629      	mov	r1, r5
 8005cac:	4630      	mov	r0, r6
 8005cae:	f000 f85d 	bl	8005d6c <_sbrk_r>
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	d123      	bne.n	8005cfe <_malloc_r+0x92>
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	4630      	mov	r0, r6
 8005cba:	6033      	str	r3, [r6, #0]
 8005cbc:	f000 f86c 	bl	8005d98 <__malloc_unlock>
 8005cc0:	e7e3      	b.n	8005c8a <_malloc_r+0x1e>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	1b5b      	subs	r3, r3, r5
 8005cc6:	d417      	bmi.n	8005cf8 <_malloc_r+0x8c>
 8005cc8:	2b0b      	cmp	r3, #11
 8005cca:	d903      	bls.n	8005cd4 <_malloc_r+0x68>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	441c      	add	r4, r3
 8005cd0:	6025      	str	r5, [r4, #0]
 8005cd2:	e004      	b.n	8005cde <_malloc_r+0x72>
 8005cd4:	6863      	ldr	r3, [r4, #4]
 8005cd6:	42a2      	cmp	r2, r4
 8005cd8:	bf0c      	ite	eq
 8005cda:	600b      	streq	r3, [r1, #0]
 8005cdc:	6053      	strne	r3, [r2, #4]
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f000 f85a 	bl	8005d98 <__malloc_unlock>
 8005ce4:	f104 000b 	add.w	r0, r4, #11
 8005ce8:	1d23      	adds	r3, r4, #4
 8005cea:	f020 0007 	bic.w	r0, r0, #7
 8005cee:	1ac2      	subs	r2, r0, r3
 8005cf0:	d0cc      	beq.n	8005c8c <_malloc_r+0x20>
 8005cf2:	1a1b      	subs	r3, r3, r0
 8005cf4:	50a3      	str	r3, [r4, r2]
 8005cf6:	e7c9      	b.n	8005c8c <_malloc_r+0x20>
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	6864      	ldr	r4, [r4, #4]
 8005cfc:	e7cc      	b.n	8005c98 <_malloc_r+0x2c>
 8005cfe:	1cc4      	adds	r4, r0, #3
 8005d00:	f024 0403 	bic.w	r4, r4, #3
 8005d04:	42a0      	cmp	r0, r4
 8005d06:	d0e3      	beq.n	8005cd0 <_malloc_r+0x64>
 8005d08:	1a21      	subs	r1, r4, r0
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f000 f82e 	bl	8005d6c <_sbrk_r>
 8005d10:	3001      	adds	r0, #1
 8005d12:	d1dd      	bne.n	8005cd0 <_malloc_r+0x64>
 8005d14:	e7cf      	b.n	8005cb6 <_malloc_r+0x4a>
 8005d16:	bf00      	nop
 8005d18:	200000d4 	.word	0x200000d4
 8005d1c:	200000d8 	.word	0x200000d8

08005d20 <_realloc_r>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	4607      	mov	r7, r0
 8005d24:	4614      	mov	r4, r2
 8005d26:	460e      	mov	r6, r1
 8005d28:	b921      	cbnz	r1, 8005d34 <_realloc_r+0x14>
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d30:	f7ff bf9c 	b.w	8005c6c <_malloc_r>
 8005d34:	b922      	cbnz	r2, 8005d40 <_realloc_r+0x20>
 8005d36:	f7ff ff4d 	bl	8005bd4 <_free_r>
 8005d3a:	4625      	mov	r5, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d40:	f000 f830 	bl	8005da4 <_malloc_usable_size_r>
 8005d44:	42a0      	cmp	r0, r4
 8005d46:	d20f      	bcs.n	8005d68 <_realloc_r+0x48>
 8005d48:	4621      	mov	r1, r4
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	f7ff ff8e 	bl	8005c6c <_malloc_r>
 8005d50:	4605      	mov	r5, r0
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d0f2      	beq.n	8005d3c <_realloc_r+0x1c>
 8005d56:	4631      	mov	r1, r6
 8005d58:	4622      	mov	r2, r4
 8005d5a:	f7ff ff13 	bl	8005b84 <memcpy>
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4638      	mov	r0, r7
 8005d62:	f7ff ff37 	bl	8005bd4 <_free_r>
 8005d66:	e7e9      	b.n	8005d3c <_realloc_r+0x1c>
 8005d68:	4635      	mov	r5, r6
 8005d6a:	e7e7      	b.n	8005d3c <_realloc_r+0x1c>

08005d6c <_sbrk_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	2300      	movs	r3, #0
 8005d70:	4d05      	ldr	r5, [pc, #20]	; (8005d88 <_sbrk_r+0x1c>)
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	602b      	str	r3, [r5, #0]
 8005d78:	f7fb fe3c 	bl	80019f4 <_sbrk>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_sbrk_r+0x1a>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_sbrk_r+0x1a>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20000258 	.word	0x20000258

08005d8c <__malloc_lock>:
 8005d8c:	4801      	ldr	r0, [pc, #4]	; (8005d94 <__malloc_lock+0x8>)
 8005d8e:	f000 b811 	b.w	8005db4 <__retarget_lock_acquire_recursive>
 8005d92:	bf00      	nop
 8005d94:	20000260 	.word	0x20000260

08005d98 <__malloc_unlock>:
 8005d98:	4801      	ldr	r0, [pc, #4]	; (8005da0 <__malloc_unlock+0x8>)
 8005d9a:	f000 b80c 	b.w	8005db6 <__retarget_lock_release_recursive>
 8005d9e:	bf00      	nop
 8005da0:	20000260 	.word	0x20000260

08005da4 <_malloc_usable_size_r>:
 8005da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da8:	1f18      	subs	r0, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bfbc      	itt	lt
 8005dae:	580b      	ldrlt	r3, [r1, r0]
 8005db0:	18c0      	addlt	r0, r0, r3
 8005db2:	4770      	bx	lr

08005db4 <__retarget_lock_acquire_recursive>:
 8005db4:	4770      	bx	lr

08005db6 <__retarget_lock_release_recursive>:
 8005db6:	4770      	bx	lr

08005db8 <_init>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr

08005dc4 <_fini>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr
